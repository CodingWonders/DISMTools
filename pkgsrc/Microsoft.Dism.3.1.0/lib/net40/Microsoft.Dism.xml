<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Dism</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>
            Allows you to obtain the method or property name of the caller to the method.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi">
            <summary>
            Represents the main entry point into the Deployment Image Servicing and Management (DISM) API.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismApi.AddCapability(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Add a capability to an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="capabilityName">The name of the capability that is being added.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.AddCapability(Microsoft.Dism.DismSession,System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Add a capability to an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="capabilityName">The name of the capability that is being added.</param>
            <param name="limitAccess">The flag indicates whether WU/WSUS should be contacted as a source location for downloading the payload of a capability. If payload of the capability to be added exists, the flag is ignored.</param>
            <param name="sourcePaths">A list of source locations. The function shall look up removed payload files from the locations specified in SourcePaths, and if not found, continue the search by contacting WU/WSUS depending on parameter LimitAccess.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.AddCapability(Microsoft.Dism.DismSession,System.String,System.Boolean,System.Collections.Generic.List{System.String},Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Add a capability to an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="capabilityName">The name of the capability that is being added.</param>
            <param name="limitAccess">The flag indicates whether WU/WSUS should be contacted as a source location for downloading the payload of a capability. If payload of the capability to be added exists, the flag is ignored.</param>
            <param name="sourcePaths">A list of source locations. The function shall look up removed payload files from the locations specified in SourcePaths, and if not found, continue the search by contacting WU/WSUS depending on parameter LimitAccess.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="T:Microsoft.Dism.DismApi.NativeMethods">
            <summary>
            Represents native functions called by DismApi.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismAddCapability(Microsoft.Dism.DismSession,System.String,System.Boolean,System.String[],System.UInt32,Microsoft.Win32.SafeHandles.SafeWaitHandle,Microsoft.Dism.DismApi.DismProgressCallback,System.IntPtr)">
            <summary>
            Add a capability to an image.
            </summary>
            <param name="session">A valid DismSession. The DismSession must be associated with an image. You can associate a session with an image by using the DismOpenSession.</param>
            <param name="name">The name of the capability that is being added.</param>
            <param name="limitAccess">The flag indicates whether WU/WSUS should be contacted as a source location for downloading the payload of a capability. If payload of the capability to be added exists, the flag is ignored.</param>
            <param name="sourcePaths">A list of source locations. The function shall look up removed payload files from the locations specified in SourcePaths, and if not found, continue the search by contacting WU/WSUS depending on parameter LimitAccess.</param>
            <param name="sourcePathCount">The count of entries in SourcePaths.</param>
            <param name="cancelEvent">This is a handle to an event for cancellation.</param>
            <param name="progress">Pointer to a client defined callback function to report progress.</param>
            <param name="userData">User defined custom data. This will be passed back to the user through the callback.</param>
            <returns>Returns S_OK on success.</returns>
            <remarks>
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt684919.aspx" />
            HRESULT WINAPI DismAddCapability(_In_ DismSession Session, _In_ PCWSTR Name, _In_ BOOL LimitAccess, _In_ PCWSTR* SourcePaths, _In_opt_ UINT SourcePathCount, _In_opt_ HANDLE CancelEvent, _In_opt_ DISM_PROGRESS_CALLBACK  Progress, _In_opt_ PVOID UserData);
            </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismAddDriver(Microsoft.Dism.DismSession,System.String,System.Boolean)">
            <summary>
            Adds a third party driver (.inf) to an offline Windows® image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="driverPath">A relative or absolute path to the driver .inf file.</param>
            <param name="forceUnsigned">A Boolean value that specifies whether to accept unsigned drivers to an x64-based image. Unsigned drivers will automatically be added to an x86-based image.</param>
            <returns>Returns S_OK on success.</returns>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824764.aspx" />
            CDATA[HRESULT WINAPI DismAddDriver (_In_ DismSession Session, _In_ PCWSTR DriverPath, _In_ BOOL ForceUnsigned);
            </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismAddPackage(Microsoft.Dism.DismSession,System.String,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafeWaitHandle,Microsoft.Dism.DismApi.DismProgressCallback,System.IntPtr)">
             <summary>
             Adds a single .cab or .msu file to a Windows® image.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="packagePath">A relative or absolute path to the .cab or .msu file being added or a folder containing the expanded files of a single .cab file.</param>
             <param name="ignoreCheck">A Boolean value to specify whether to ignore the internal applicability checks that are done when a package is added.</param>
             <param name="preventPending">A Boolean value to specify whether to add a package if it has pending online actions.</param>
             <param name="cancelEvent">Optional. You can set a CancelEvent for this function in order to cancel the operation in progress when signaled by the client. If the CancelEvent is received at a stage when the operation cannot be canceled, the operation will continue and return a success code. If the CancelEvent is received and the operation is canceled, the image state is unknown. You should verify the image state before continuing or discard the changes and start again.</param>
             <param name="progress">Optional. A pointer to a client-defined DismProgressCallback Function.</param>
             <param name="userData">Optional. User defined custom data.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>Only .cab files can be added to an online image. Either .cab or .msu files can be added to an offline image.
            
             This function will return a special error code if the package is not applicable. You can use the DismGetPackageInfo Function to determine if a package is applicable to the target image.
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824788.aspx" />
             HRESULT WINAPI DismAddPackage (_In_ DismSession Session, _In_ PCWSTR PackagePath, _In_ BOOL IgnoreCheck, _In_ BOOL PreventPending _In_opt_ HANDLE CancelEvent, _In_opt_ DISM_PROGRESS_CALLBACK Progress, _In_opt_ PVOID UserData)
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods._DismAddProvisionedAppxPackage(Microsoft.Dism.DismSession,System.String,System.String[],System.UInt32,System.String[],System.UInt32,System.String[],System.UInt32,System.Boolean,System.String,System.String,Microsoft.Dism.DismStubPackageOption)">
            <summary>
            Adds a provisioned appx package.
            </summary>
            <param name="Session">A valid DISM Session.</param>
            <param name="AppPath">The application path.</param>
            <param name="DependencyPackages">The dependent packages.</param>
            <param name="DependencyPackageCount">The dependent package count.</param>
            <param name="OptionalPackages">The optional packages.</param>
            <param name="OptionalPackageCount">The optional package count.</param>
            <param name="LicensePaths">The license paths.</param>
            <param name="LicensePathCount">The license path count.</param>
            <param name="SkipLicense">Specifies whether the license should be skipped.</param>
            <param name="CustomDataPath">A custom path.</param>
            <param name="Regions">The regions.</param>
            <param name="stubPackageOption">The stub package option.</param>
            <returns>Returns S_OK on success.</returns>
            <remarks>
              HRESULT WINAPI
            _DismAddProvisionedAppxPackage(
              _In_ DismSession Session,
              _In_ PCWSTR AppPath,
              _In_reads_opt_(DependencyPackageCount) PCWSTR* DependencyPackages,
              _In_ UINT DependencyPackageCount,
              _In_reads_opt_(OptionalPackageCount) PCWSTR* OptionalPackages,
              _In_ UINT OptionalPackageCount,
              _In_reads_opt_(LicensePathCount) PCWSTR* LicensePaths,
              _In_ UINT LicensePathCount,
              _In_ BOOL SkipLicense,
              _In_opt_ PCWSTR CustomDataPath,
              _In_opt_ PCWSTR Region,
              _In_ DismStubPackageOption stubPackageOption);
            </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods._DismApplyFfuImage(System.String,System.String,System.String)">
            <summary>
            Undocumented method to apply an FFU image.
            </summary>
            <param name="ImagePath">The path to the FFU file to apply.</param>
            <param name="ApplyPath">The drive path to apply the image to.</param>
            <param name="PartPath">An optional file pattern that matches the names of split FFU images.</param>
            <returns>Returns S_OK on success.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismApplyUnattend(Microsoft.Dism.DismSession,System.String,System.Boolean)">
             <summary>
             Applies an unattended answer file to a Windows® image.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="unattendFile">A relative or absolute path to the answer file that will be applied to the image.</param>
             <param name="singleSession">A Boolean value that specifies whether the packages that are listed in an answer file will be processed in a single session or in multiple sessions.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>When you use DISM to apply an answer file to an image, the unattended settings in the offlineServicing configuration pass are applied to the Windows image. For more information, see Unattended Servicing Command-Line Options.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh825840.aspx" />
             HRESULT WINAPI DismApplyUnattend (_In_ DismSession Session, _In_ PCWSTR UnattendFile, _In_ BOOL SingleSession);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismCheckImageHealth(Microsoft.Dism.DismSession,System.Boolean,Microsoft.Win32.SafeHandles.SafeWaitHandle,Microsoft.Dism.DismApi.DismProgressCallback,System.IntPtr,Microsoft.Dism.DismImageHealthState@)">
             <summary>
             Checks whether the image can be serviced or whether it is corrupted.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="scanImage">A Boolean value that specifies whether to scan the image or just check for flags from a previous scan.</param>
             <param name="cancelEvent">Optional. You can set a CancelEvent for this function in order to cancel the operation in progress when signaled by the client. If the CancelEvent is received at a stage when the operation cannot be canceled, the operation will continue and return a success code. If the CancelEvent is received and the operation is canceled, the image state is unknown. You should verify the image state before continuing or discard the changes and start again.</param>
             <param name="progress">Optional. A pointer to a client-defined DismProgressCallback Function.</param>
             <param name="userData">Optional. User defined custom data.</param>
             <param name="imageHealth">A pointer to the DismImageHealthState Enumeration. The enumeration value is set during this operation.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>If ScanImage is set to True, this function will take longer to finish.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824769.aspx" />
             HRESULT WINAPI DismCheckImageHealth(_In_ DismSession Session, _In_ BOOL ScanImage, _In_opt_ HANDLE CancelEvent, _In_opt_ DISM_PROGRESS_CALLBACK Progress, _In_opt_ PVOID UserData, _Out_ DismImageHealthState* ImageHealth);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismCleanupMountpoints">
            <summary>
            Removes files and releases resources associated with corrupted or invalid mount paths.
            </summary>
            <returns>Returns S_OK on success.</returns>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824743.aspx" />
            HRESULT WINAPI DismCleanupMountpoints( );
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismCloseSession(System.IntPtr)">
             <summary>
             Closes a DISMSession created by DismOpenSession Function. This function does not unmount the image. To unmount the image, use the DismUnmountImage Function once all sessions are closed.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <returns>Returns S_OK on success.
            
             If the DISMSession is performing operations on other threads, those operations will complete before the DISMSession is destroyed. If additional operations are invoked by other threads after DismCloseSession is called, but before DismCloseSession returns, those operations will fail and return a DISMAPI_E_INVALID_DISM_SESSION error.
            
             The DISMSession handle will become invalid after completion of this call. Operations invoked on the DISMSession after completion of DismCloseSession will fail and return the error E_INVALIDARG.</returns>
             <remarks>The DISMSession will be shut down after this call is completed but the image will not be unmounted. To unmount the image, use the DismUnmountImage Function once all sessions are closed.</remarks>
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh825839.aspx" />
             HRESULT WINAPI DismCloseSession(_In_ DismSession Session);
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismCommitImage(Microsoft.Dism.DismSession,System.UInt32,Microsoft.Win32.SafeHandles.SafeWaitHandle,Microsoft.Dism.DismApi.DismProgressCallback,System.IntPtr)">
             <summary>
             Commits the changes made to a Windows® image in a mounted .wim or .vhd file. The image must be mounted using the DismMountImage Function.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="flags">The commit flags to use for this operation. For more information about mount flags, see DISM API Constants.</param>
             <param name="cancelEvent">Optional. You can set a CancelEvent for this function in order to cancel the operation in progress when signaled by the client. If the CancelEvent is received at a stage when the operation cannot be canceled, the operation will continue and return a success code. If the CancelEvent is received and the operation is canceled, the image state is unknown. You should verify the image state before continuing or discard the changes and start again.</param>
             <param name="progress">Optional. A pointer to a client-defined DismProgressCallback Function.</param>
             <param name="userData">Optional. User defined custom data.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>The DismCommitImage function does not unmount the image.
             <para>DismCommitImage can only be used on an image that is mounted within the DISM infrastructure. It does not apply to images mounted by another tool, such as the DiskPart tool, which are serviced using the DismOpenSession Function. You must use the DismMountImage Function to mount an image within the DISM infrastructure.</para>
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh825835.aspx" />
             HRESULT WINAPI DismCommitImage(_In_ DismSession Session, _In_ DWORD Flags, _In_opt_ HANDLE CancelEvent, _In_opt_ DISM_PROGRESS_CALLBACK Progress, _In_opt_ PVOID UserData);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismDelete(System.IntPtr)">
             <summary>
             Releases resources held by a structure or an array of structures returned by other DISM API functions.
             </summary>
             <param name="dismStructure">A pointer to the structure, or array of structures, to be deleted. The structure must have been returned by an earlier call to a DISM API function.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>All structures that are returned by DISM API functions are allocated on the heap. The client must not delete or free these structures directly. Instead, the client should call DismDelete and pass in the pointer that was returned by the earlier DISM API call.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824768.aspx" />
             HRESULT WINAPI DismDelete(_In_ VOID* DismStructure);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismDisableFeature(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean,Microsoft.Win32.SafeHandles.SafeWaitHandle,Microsoft.Dism.DismApi.DismProgressCallback,System.IntPtr)">
             <summary>
             Disables a feature in the current image.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="featureName">The name of the feature that you want to disable. To disable more than one feature, separate each feature name with a semicolon.</param>
             <param name="packageName">Optional. The name of the parent package that the feature is a part of.
            
             This is an optional parameter. If no package is specified, then the default Windows® Foundation package is used.</param>
             <param name="removePayload">A Boolean value specifying whether to remove the files required to enable the feature.</param>
             <param name="cancelEvent">Optional. You can set a CancelEvent for this function in order to cancel the operation in progress when signaled by the client. If the CancelEvent is received at a stage when the operation cannot be canceled, the operation will continue and return a success code. If the CancelEvent is received and the operation is canceled, the image state is unknown. You should verify the image state before continuing or discard the changes and start again.</param>
             <param name="progress">Optional. A pointer to a client-defined DismProgressCallback Function.</param>
             <param name="userData">Optional. User specified data.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824766.aspx" />
             HRESULT WINAPI DismDisableFeature (_In_ DismSession Session, _In_ PCWSTR FeatureName, _In_opt_ PCWSTR PackageName, _In_ BOOL RemovePayload, _In_opt_ HANDLE CancelEvent, _In_opt_ DISM_PROGRESS_CALLBACK Progress, _In_opt_ PVOID UserData);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismEnableFeature(Microsoft.Dism.DismSession,System.String,System.String,Microsoft.Dism.DismPackageIdentifier,System.Boolean,System.String[],System.UInt32,System.Boolean,Microsoft.Win32.SafeHandles.SafeWaitHandle,Microsoft.Dism.DismApi.DismProgressCallback,System.IntPtr)">
             <summary>
             Enables a feature in an image. Features are identified by a name and can optionally be tied to a package.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
             <param name="identifier">Optional. Either an absolute path to a .cab file or the package name for the parent package of the feature to be enabled.</param>
             <param name="packageIdentifier">Optional. A valid DismPackageIdentifier Enumeration value. DismPackageName should be used when the Identifier parameter is pointing to a package name, and DismPackagePath should be used when Identifier points to the absolute path of a .cab file. If Identifier field is not NULL, you must specify a valid PackageIdentifier parameter. If the Identifier field is NULL, the PackageIdentifier parameter is ignored.</param>
             <param name="limitAccess">A Boolean value indicating whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
             <param name="sourcePaths">Optional. A list of source locations to check for files needed to enable the feature.</param>
             <param name="sourcePathCount">Optional. The number of source locations specified.</param>
             <param name="enableAll">Enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
             <param name="cancelEvent">Optional. You can set a CancelEvent for this function in order to cancel the operation in progress when signaled by the client. If the CancelEvent is received at a stage when the operation cannot be canceled, the operation will continue and return a success code. If the CancelEvent is received and the operation is canceled, the image state is unknown. You should verify the image state before continuing or discard the changes and start again.</param>
             <param name="progress">Optional. A pointer to a client-defined DismProgressCallback Function.</param>
             <param name="userData">Optional. User defined custom data.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>If the feature is present in the foundation package, you do not have to specify any package information. If the feature is in an optional package or feature pack that has already been installed in the image, specify a package name in the Identifier parameter and specify DismPackageName as the PackageIdentifier.If the feature cannot be enabled due to the parent feature not being enabled, a special error code will be returned. You can use EnableAll to enable the parent features when you enable the specified features, or you can use the DismGetFeatureParent Function to enumerate the parent features and enable them first.
            
             If the feature to be enabled is not a component of the foundation package, you must add the parent optional package with the DismAddPackage Function before you enable the feature. Do not you specify a path to a .cab file of an optional package that has not been added to the image in the Identifier parameter. If you specify a package that has not been added, and you specify DismPackagePath as the PackageIdentifier, the function will complete successfully but the feature will not be enabled.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824737.aspx" />
             HRESULT WINAPI DismEnableFeature (_In_ DismSession Session, _In_ PCWSTR FeatureName, _In_opt_ PCWSTR Identifier, _In_opt_ DismPackageIdentifier PackageIdentifier, _In_ BOOL LimitAccess, _In_reads_opt_(SourcePathCount) PCWSTR* SourcePaths, _In_opt_ UINT SourcePathCount, _In_opt_ HANDLE CancelEvent, _In_opt_ DISM_PROGRESS_CALLBACK Progress, _In_opt_ PVOID UserData);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetCapabilities(Microsoft.Dism.DismSession,System.IntPtr@,System.UInt32@)">
            <summary>
            Gets DISM capabilities.
            </summary>
            <param name="session">A valid DismSession. The DismSession must be associated with an image. You can associate a session with an image by using the DismOpenSession.</param>
            <param name="capability">Pointer that will receive the info of capability.</param>
            <param name="count">The number of DismCapability structures that were returned.</param>
            <returns>Returns S_OK on success.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetCapabilityInfo(Microsoft.Dism.DismSession,System.String,System.IntPtr@)">
            <summary>
            Gets DISM capabilities.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="name">The name of the specified capability.</param>
            <param name="info">Pointer that will receive the info of capability.</param>
            <returns>Returns S_OK on success.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetDriverInfo(Microsoft.Dism.DismSession,System.String,System.IntPtr@,System.UInt32@,System.IntPtr@)">
             <summary>
             Gets information about an .inf file in a specified image.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="driverPath">A relative or absolute path to the driver .inf file.</param>
             <param name="driver">A pointer to the address of an array of DismDriver Structure objects.</param>
             <param name="count">The number of DismDriver structures that were returned.</param>
             <param name="driverPackage">Optional. A pointer to the address of a DismDriverPackage Structure object.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>This function returns information about the .inf file installed on the image. The driver associated with the .inf file may or may not be installed in the image.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824733.aspx" />
             HRESULT WINAPI DismGetDriverInfo (_In_ DismSession Session, _In_ PCWSTR DriverPath, _Outptr_result_buffer_(*Count) DismDriver** Driver, _Out_ UINT* Count, _Out_opt_ DismDriverPackage** DriverPackage);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetDrivers(Microsoft.Dism.DismSession,System.Boolean,System.IntPtr@,System.UInt32@)">
            <summary>
            Lists the drivers in an image.
            </summary>
            <param name="Session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="AllDrivers">A Boolean value specifying which drivers to retrieve.</param>
            <param name="DriverPackage">A pointer to the address of an array of DismDriverPackage Structure objects.</param>
            <param name="Count">The number of DismDriverPackage structures that were returned.</param>
            <returns>Returns S_OK on success.</returns>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824784.aspx" />
            HRESULT WINAPI DismGetDrivers (_In_ DismSession Session, _In_ BOOL AllDrivers, _Outptr_result_buffer_(*Count) DismDriverPackage** DriverPackage, _Out_ UINT* Count);
            </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetFeatureInfo(Microsoft.Dism.DismSession,System.String,System.String,Microsoft.Dism.DismPackageIdentifier,System.IntPtr@)">
             <summary>
             Gets detailed information for the specified feature.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="featureName">The name of the feature that you want to get more information about.</param>
             <param name="identifier">Optional. Either an absolute path to a .cab file or the package name, depending on the PackageIdentifier parameter value.</param>
             <param name="packageIdentifier">Optional. A valid DismPackageIdentifier Enumeration value.</param>
             <param name="featureInfo">A pointer to the address of an array of DismFeatureInfo Structure objects.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>You can use this function to get the custom properties of a feature. If the feature has custom properties, they will be stored in the CustomProperty field as an array. Not all features have custom properties.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824735.aspx" />
             HRESULT WINAPI DismGetFeatureInfo (_In_ DismSession Session, _In_ PCWSTR FeatureName, _In_opt_ PCWSTR Identifier, _In_opt_ DismPackageIdentifier PackageIdentifier, _Out_ DismFeatureInfo** FeatureInfo);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetFeatureParent(Microsoft.Dism.DismSession,System.String,System.String,Microsoft.Dism.DismPackageIdentifier,System.IntPtr@,System.UInt32@)">
             <summary>
             Gets the parent features of a specified feature.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="featureName">The name of the feature that you want to find the parent of.</param>
             <param name="identifier">Optional. Either an absolute path to a .cab file or the package name, depending on the PackageIdentifier parameter value.</param>
             <param name="packageIdentifier">Optional. A valid DismPackageIdentifier Enumeration value.</param>
             <param name="feature">A pointer to the address of an array of DismFeature Structure objects.</param>
             <param name="count">The number of DismFeature structures that were returned.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>For a feature to be enabled, one or more of its parent features must be enabled. You can use this function to enumerate the parent features and determine which parent needs to be enabled.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824798.aspx" />
             HRESULT WINAPI DismGetFeatureParent (_In_ DismSession Session, _In_ PCWSTR FeatureName, _In_opt_ PCWSTR Identifier, _In_opt_ DismPackageIdentifier PackageIdentifier, _Outptr_result_buffer_(*Count) DismFeature** Feature, _Out_ UINT* Count);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetFeatures(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismPackageIdentifier,System.IntPtr@,System.UInt32@)">
            <summary>
            Gets all the features in an image, regardless of whether the features are enabled or disabled.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="identifier">Optional. Either an absolute path to a .cab file or the package name, depending on the PackageIdentifier parameter value.</param>
            <param name="packageIdentifier">Optional. A valid DismPackageIdentifier Enumeration value.</param>
            <param name="feature">A pointer to the address of an array of DismFeature Structure objects.</param>
            <param name="count">The number of DismFeature structures that were returned.</param>
            <returns>Returns S_OK on success.</returns>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824771.aspx" />
            HRESULT WINAPI DismGetFeatures (_In_ DismSession Session, _In_opt_ PCWSTR Identifier, _In_opt_ DismPackageIdentifier PackageIdentifier, _Outptr_result_buffer_(*Count) DismFeature** Feature, _Out_ UINT* Count);
            </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetImageInfo(System.String,System.IntPtr@,System.UInt32@)">
             <summary>
             Returns an array of DismImageInfo Structure elements that describe the images in a .wim or .vhd file.
             </summary>
             <param name="imageFilePath">A relative or absolute path to a .wim or .vhd file.</param>
             <param name="imageInfo">A pointer to the address of an array of DismImageInfo Structure objects.</param>
             <param name="count">The number of DismImageInfo structures that are returned.</param>
             <returns>S_OK on success.</returns>
             <remarks>The array of DismImageInfo structures are allocated by DISM API on the heap.
            
             Important
             You must call the DismDelete Function, passing the ImageInfo pointer, to free the resources associated with the DismImageInfo structures.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824767.aspx" />
             HRESULT WINAPI DismGetImageInfo(_In_ PCWSTR ImageFilePath, _Outptr_result_buffer_(*Count) DismImageInfo** ImageInfo, _Out_ UINT* Count);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetLastErrorMessage(System.IntPtr@)">
             <summary>
             Retrieves the error message in the current thread immediately after a failure.
             </summary>
             <param name="errorMessage">The detailed error message in the current thread.</param>
             <returns>Returns OK on success.</returns>
             <remarks>You can retrieve a detailed error message immediately after a DISM API failure. The last error message is maintained on a per-thread basis. An error message on a thread will not overwrite the last error message on another thread.
            
             DismGetLastErrorMessage does not apply to the DismShutdown function, DismDelete function, or the DismGetLastErrorMessage function.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824754.aspx" />
             HRESULT WINAPI DismGetLastErrorMessage(_Out_ DismString** ErrorMessage);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetMountedImageInfo(System.IntPtr@,System.UInt32@)">
             <summary>
             Returns an array of DismMountedImageInfo Structure elements that describe the images that are mounted currently.
             </summary>
             <param name="mountedImageInfo">A pointer to the address of an array of DismMountedImageInfo Structure objects.</param>
             <param name="count">The number of DismMountedImageInfo structures that are returned.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>Only images mounted using the DISM infrastructure will be returned. If a .vhd file is mounted outside of DISM, such as with the DiskPart tool, this call will not return information about that image. You must use the DismMountImage Function to mount the image.
            
             The array of DismMountedImageInfo structures are allocated by the DISM API on the heap.
            
             You must call the DismDelete Function, passing the ImageInfo pointer, to free the resources associated with the DismImageInfo structures.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824745.aspx" />
             HRESULT WINAPI DismGetMountedImageInfo(_Outptr_result_buffer_(*Count) DismMountedImageInfo** MountedImageInfo, _Out_ UINT* Count);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetPackageInfo(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismPackageIdentifier,System.IntPtr@)">
             <summary>
             Retrieves all of the standard package properties as the DismGetPackages Function, as well as more specific package information and custom properties.
             </summary>
             <param name="dismSession">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="identifier">Either an absolute path to a .cab file or the package name, depending on the PackageIdentifier parameter value.</param>
             <param name="packageIdentifier">A valid DismPackageIdentifier Enumeration value.</param>
             <param name="packageInfo">A pointer to the address of an array of DismPackageInfo Structure objects.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>You can use this function to determine whether a package is applicable to the specified image. The DismPackageInfo Structure contains an Applicable field, which is a Boolean that returns <see langword="true" /> if the package is applicable and <see langword="false" /> if the package is not applicable to the specified image.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824801.aspx" />
             HRESULT WINAPI DismGetPackageInfo (_In_ DismSession Session, _In_ PCWSTR Identifier, _In_ DismPackageIdentifier PackageIdentifier, _Out_ DismPackageInfo** PackageInfo);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetPackageInfoEx(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismPackageIdentifier,System.IntPtr@)">
            <summary>
            Retrieves all of the standard package properties as the DismGetPackages Function, as well as more specific package information and custom properties.
            </summary>
            <param name="dismSession">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="identifier">Either an absolute path to a .cab file or the package name, depending on the PackageIdentifier parameter value.</param>
            <param name="packageIdentifier">A valid DismPackageIdentifier Enumeration value.</param>
            <param name="packageInfoEx">A pointer to the address of an array of DismPackageInfoEx Structure objects.</param>
            <returns>Returns S_OK on success.</returns>
            <remarks>
            HRESULT WINAPI DismGetPackageInfoEx (_In_ DismSession Session, _In_ PCWSTR Identifier, _In_ DismPackageIdentifier PackageIdentifier, _Out_ DismPackageInfoEx** PackageInfoEx);
            </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismGetPackages(Microsoft.Dism.DismSession,System.IntPtr@,System.UInt32@)">
             <summary>
             Lists each package in an image and provides basic information about each package, such as the package name and type of package.
             </summary>
             <param name="dismSession">A valid DISMSession. The DismSession must be associated with an image.</param>
             <param name="packageInfo">A pointer to the array of DismPackage Structure objects.</param>
             <param name="count">The number of DismPackage structures that are returned.</param>
             <returns>Returns S_OK on success.
            
             Package points to an array of DismPackage Structure objects. You can manipulate this array using normal array notation in order to get information about each package in the image.</returns>
             <remarks>When you are finished with the Package array, you must remove it by using the DismDelete Function.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824759.aspx" />
             HRESULT WINAPI DismGetPackages (_In_ DismSession Session, _Outptr_result_buffer_(*Count) DismPackage** Package, _Out_ UINT* Count);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods._DismGetProvisionedAppxPackages(Microsoft.Dism.DismSession,System.IntPtr@,System.UInt32@)">
            <summary>
            Gets a provisioned appx package.
            </summary>
            <param name="session">A valid DISM Session.</param>
            <param name="packageBufPtr">Receives the array of packages.</param>
            <param name="packageCount">Receives the count of packages.</param>
            <returns>Returns S_OK on success.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismInitialize(Microsoft.Dism.DismLogLevel,System.String,System.String)">
             <summary>
             Initializes DISM API. DismInitialize must be called once per process before calling any other DISM API functions.
             </summary>
             <param name="logLevel">A DismLogLevel Enumeration value, such as DismLogErrorsWarnings.</param>
             <param name="logFilePath">Optional. A relative or absolute path to a log file. All messages generated will be logged to this path. If NULL, the default log path, %WinDir%\Logs\DISM\dism.log, will be used.</param>
             <param name="scratchDirectory">Optional. A relative or absolute path to a scratch directory. DISM API will use this directory for internal operations. If NULL, the default temp directory, \Windows\%Temp%, will be used.</param>
             <returns>Returns S_OK on success.
            
             Returns DISMAPI_E_DISMAPI_ALREADY_INITIALIZED if DismInitialize has already been called by the process without a matching call to DismShutdown.
            
             Returns ERROR_ELEVATION_REQUIRED as an HRESULT if the process is not elevated.</returns>
             <remarks>The client code must call DismInitialize once per process. DISM API will serialize concurrent calls to DismInitialize. The first call will succeed and the others will fail. For more information, see Using the DISM API.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824803.aspx" />
             HRESULT WINAPI DismInitialize(_In_ DismLogLevel LogLevel, _In_opt_ PCWSTR LogFilePath, _In_opt_ PCWSTR ScratchDirectory);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismMountImage(System.String,System.String,System.UInt32,System.String,Microsoft.Dism.DismImageIdentifier,System.UInt32,Microsoft.Win32.SafeHandles.SafeWaitHandle,Microsoft.Dism.DismApi.DismProgressCallback,System.IntPtr)">
             <summary>
             Mounts a WIM or VHD image file to a specified location.
             </summary>
             <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
             <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
             <param name="imageIndex">The index of the image in the WIM file that you want to mount. For a VHD file, you must specify an index of 1.</param>
             <param name="imageName">Optional. The name of the image that you want to mount.</param>
             <param name="imageIdentifier">A DismImageIdentifier Enumeration value such as DismImageIndex.</param>
             <param name="flags">The mount flags to use for this operation. For more information about mount flags, see DISM API Constants.</param>
             <param name="cancelEvent">Optional. You can set a CancelEvent for this function in order to cancel the operation in progress when signaled by the client. If the CancelEvent is received at a stage when the operation cannot be canceled, the operation will continue and return a success code. If the CancelEvent is received and the operation is canceled, the image state is unknown. You should verify the image state before continuing or discard the changes and start again.</param>
             <param name="progress">Optional. A pointer to a client-defined DismProgressCallback Function.</param>
             <param name="userData">Optional. User defined custom data.</param>
             <returns>Returns OK on success.
            
             Returns E_INVALIDARG if any of the paths are not well-formed or if MountPath or ImageFilePath does not exist or is invalid.
            
             Returns a Win32 error code mapped to an HRESULT for other errors.</returns>
             <remarks>After mounting an image, use the DismOpenSession Function to start a servicing session. For more information, see Using the DISM API.
            
             Mounting an image from a WIM or VHD file that is stored on the network is not supported. You must specify a file on the local computer.
            
             To mount an image from a VHD file, you must specify an ImageIndex of 1.
            
             The MountPath must be a file path that already exists on the computer. Images in WIM and VHD files can be mounted to an empty folder on an NTFS formatted drive. You can also mount an image from a VHD file to an unassigned drive letter. You cannot mount an image to the root of the existing drive.
            
             When mounting an image in a WIM file, the image can either be identified by the image index number specified by ImageIndex, or the name of the image specified by ImageName. ImageIdentifier specifies whether to use the ImageIndex or ImageName parameter to identify the image.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824731.aspx" />
             HRESULT WINAPI DismMountImage (_In_ PCWSTR ImageFilePath, _In_ PCWSTR MountPath, _In_ UINT ImageIndex, _In_opt_ PCWSTR ImageName, _In_ DismImageIdentifier ImageIdentifier, _In_ DWORD Flags, _In_opt_ HANDLE CancelEvent, _In_opt_ DISM_PROGRESS_CALLBACK Progress, _In_opt_ PVOID UserData);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismOpenSession(System.String,System.String,System.String,System.IntPtr@)">
             <summary>
             Associates an offline or online Windows image with a DISMSession.
             </summary>
             <param name="imagePath">Set ImagePath to one of the following values:
            
             An absolute or relative path to the root directory of an offline Windows image.
            
             An absolute or relative path to the root directory of a mounted Windows image. You can mount the image before calling DismOpenSession by using an external tool or by using the DismMountImage Function.
            
             DISM_ONLINE_IMAGE to associate the DISMSession with the online Windows installation.</param>
             <param name="windowsDirectory">Optional. A relative or absolute path to the Windows directory. The path is relative to the mount point. If the value of WindowsDirectory is NULL, the default value of Windows is used.
            
             The WindowsDirectory parameter cannot be used when the ImagePath parameter is set to DISM_ONLINE_IMAGE.</param>
             <param name="systemDrive">Optional. The letter of the system drive that contains the boot manager. If SystemDrive is NULL, the default value of the drive containing the mount point is used.
            
             The SystemDrive parameter cannot be used when the ImagePath parameter is set to DISM_ONLINE_IMAGE.</param>
             <param name="session">A pointer to a valid DISMSession. The DISMSession will be associated with the image after this call is successfully completed.</param>
             <returns>Returns S_OK on success.
            
             Returns DISMAPI_E_ALREADY_ASSOCIATED if the DISMSession already has an image associated with it.
            
             Returns a Win32 error code mapped to an HRESULT for other errors.</returns>
             <remarks>The DISMSession can be used to service the image after the DISMOpenSession call is successfully completed. The DISMSession must be shut down by calling the DismCloseSession Function.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824800.aspx" />
             HRESULT WINAPI DismOpenSession(_In_ PCWSTR ImagePath, _In_opt_ PCWSTR WindowsDirectory, _In_opt_ WCHAR* SystemDrive, _Out_ DismSession* Session);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismRemountImage(System.String)">
             <summary>
             Remounts a Windows image from the .wim or .vhd file that was previously mounted at the path specified by MountPath. Use the DismOpenSession Function to associate the image with a DISMSession after it is remounted.
            
             You can use the DismRemountImage function when the image is in the DismMountStatusNeedsRemount state, as described by the DismMountStatus Enumeration. The image may enter this state if it is mounted and then a reboot occurs.
             </summary>
             <param name="mountPath">A relative or absolute path to the mount directory of the image.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824778.aspx" />
             HRESULT WINAPI DismRemountImage(_In_ PCWSTR MountPath);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismRemoveCapability(Microsoft.Dism.DismSession,System.String,Microsoft.Win32.SafeHandles.SafeWaitHandle,Microsoft.Dism.DismApi.DismProgressCallback,System.IntPtr)">
            <summary>
            Add a capability to an image.
            </summary>
            <param name="session">A valid DismSession. The DismSession must be associated with an image. You can associate a session with an image by using the DismOpenSession.</param>
            <param name="name">The name of the capability that is being removed</param>
            <param name="cancelEvent">This is a handle to an event for cancellation.</param>
            <param name="progress">Pointer to a client defined callback function to report progress.</param>
            <param name="userData">User defined custom data. This will be passed back to the user through the callback.</param>
            <returns>Returns S_OK on success.</returns>
            <remarks>
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt684925.aspx" />
            HRESULT WINAPI DismRemoveCapability(_In_ DismSession Session, _In_ PCWSTR Name, _In_opt_ HANDLE CancelEvent, _In_opt_ DISM_PROGRESS_CALLBACK  Progress, _In_opt_ PVOID UserData);
            </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismRemoveDriver(Microsoft.Dism.DismSession,System.String)">
             <summary>
             Removes an out-of-box driver from an offline image.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="driverPath">The published file name of the driver that has been added to the image, for example OEM1.inf. You can use the DismGetDrivers Function to get the published name of the driver.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>This function only supports offline images.
            
             Important
             Removing a boot-critical driver can make the offline Windows image unable to boot.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824729.aspx" />
             HRESULT WINAPI DismRemoveDriver (_In_ DismSession Session, _In_ PCWSTR DriverPath);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismRemovePackage(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismPackageIdentifier,Microsoft.Win32.SafeHandles.SafeWaitHandle,Microsoft.Dism.DismApi.DismProgressCallback,System.IntPtr)">
            <summary>
            Removes a package from an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="identifier">Either an absolute path to a .cab file or the package name, depending on the PackageIdentifier parameter value.</param>
            <param name="packageIdentifier">The parameter for a DismPackageIdentifier Enumeration.</param>
            <param name="cancelEvent">Optional. You can set a CancelEvent for this function in order to cancel the operation in progress when signaled by the client. If the CancelEvent is received at a stage when the operation cannot be canceled, the operation will continue and return a success code. If the CancelEvent is received and the operation is canceled, the image state is unknown. You should verify the image state before continuing or discard the changes and start again.</param>
            <param name="progress">Optional. A pointer to a client-defined DismProgressCallback Function.</param>
            <param name="userData">Optional. User defined custom data.</param>
            <returns>Returns S_OK on success.</returns>
            <remarks>The DismRemovePackage function does not support .msu files.</remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824732.aspx" />
            HRESULT WINAPI DismRemovePackage (_In_ DismSession Session, _In_ PCWSTR Identifier, _In_ DismPackageIdentifier PackageIdentifier, _In_opt_ HANDLE CancelEvent, _In_opt_ DISM_PROGRESS_CALLBACK Progress, _In_opt_ PVOID UserData);
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods._DismRemoveProvisionedAppxPackage(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Removes a provisioned appx package.
            </summary>
            <param name="session">A valid DISM Session.</param>
            <param name="packageName">The package name.</param>
            <returns>Returns S_OK on success.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismRestoreImageHealth(Microsoft.Dism.DismSession,System.String[],System.UInt32,System.Boolean,Microsoft.Win32.SafeHandles.SafeWaitHandle,Microsoft.Dism.DismApi.DismProgressCallback,System.IntPtr)">
             <summary>
             Repairs a corrupted image that has been identified as repairable by the DismCheckImageHealth Function.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="sourcePaths">Optional. A list of source locations to check for repair files.</param>
             <param name="sourcePathCount">Optional. The number of source locations specified.</param>
             <param name="limitAccess">Optional. Indicates if the machine is allows to use remote resources.</param>
             <param name="cancelEvent">Optional. You can set a CancelEvent for this function in order to cancel the operation in progress when signaled by the client. If the CancelEvent is received at a stage when the operation cannot be canceled, the operation will continue and return a success code. If the CancelEvent is received and the operation is canceled, the image state is unknown. You should verify the image state before continuing or discard the changes and start again.</param>
             <param name="progress">Optional. A pointer to a client-defined DismProgressCallback Function.</param>
             <param name="userData">Optional. User defined custom data.</param>
             <returns>Returns S_OK on success.</returns>
             <remarks>Run the DismCheckImageHealth Function to determine if the image is corrupted and if the image is repairable. If the DismCheckImageHealth Function returns DismImageRepairable, the DismRestoreImageHealth function can repair the image.
            
             If a repair file is not found in any of the locations specified by the SourcePaths parameter or the location paths in the registry specified by Group Policy, the DismRestoreImageHealth function will contact WU to check for a repair file unless the LimitAccess parameter is set to True.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh825836.aspx" />
             HRESULT WINAPI DismRestoreImageHealth(_In_ DismSession Session, _In_reads_opt_(SourcePathCount) PCWSTR* SourcePaths, _In_opt_ UINT SourcePathCount, _In_ BOOL LimitAccess, _In_opt_ DISM_PROGRESS_CALLBACK Progress, _In_opt_ PVOID UserData);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismShutdown">
             <summary>
             Shuts down DISM API. DismShutdown must be called once per process. Other DISM API function calls will fail after DismShutdown has been called.
             </summary>
             <returns>Returns S_OK on success.
            
             Returns DISMAPI_E_DISMAPI_NOT_INITIALIZED if the DismInitialize Function has not been called.
            
             Returns DISMAPI_E_OPEN_SESSION_HANDLES if any open DISMSession have not been closed.</returns>
             <remarks>You must call DismShutdown once per process. Calls to DismShutdown must be matched to an earlier call to the DismInitialize Function. DISM API will serialize concurrent calls to DismShutdown. The first call will succeed and the other calls will fail.
            
             Before calling DismShutdown, you must close all DISMSession using the DismCloseSession Function. If there are open DismSessions when calling DismShutdown, then the DismShutdown call will fail. For more information, see Using the DISM API.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824773.aspx" />
             HRESULT WINAPI DismShutdown( );
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods._DismSplitFfuImage(System.String,System.String,System.UInt64)">
            <summary>
            Undocumented method that splits an existing .ffu file into multiple read-only split FFU files.
            </summary>
            <param name="ImagePath">The path to an FFU image to split.</param>
            <param name="PartPath">The path to the SFU file to create.</param>
            <param name="PartSize">The maximum size in megabytes (MB) for each created file.</param>
            <returns>Retrusn S_OK on success.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.NativeMethods.DismUnmountImage(System.String,System.UInt32,Microsoft.Win32.SafeHandles.SafeWaitHandle,Microsoft.Dism.DismApi.DismProgressCallback,System.IntPtr)">
             <summary>
             Unmounts a Windows image from a specified location.
             </summary>
             <param name="mountPath">A relative or absolute path to the mount directory of the image.</param>
             <param name="flags">v</param>
             <param name="cancelEvent">Optional. You can set a CancelEvent for this function in order to cancel the operation in progress when signaled by the client. If the CancelEvent is received at a stage when the operation cannot be canceled, the operation will continue and return a success code. If the CancelEvent is received and the operation is canceled, the image state is unknown. You should verify the image state before continuing or discard the changes and start again.</param>
             <param name="progress">Optional. A pointer to a client-defined DismProgressCallback Function.</param>
             <param name="userData">Optional. User defined custom data.</param>
             <returns>Returns OK on success.</returns>
             <remarks>After you use the DismCloseSession Function to end every active DISMSession, you can unmount the image using the DismUnmountImage function.
            
             <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824802.aspx" />
             HRESULT WINAPI DismUnmountImage(_In_ PCWSTR MountPath, _In_ DWORD Flags, _In_opt_ HANDLE CancelEvent, _In_opt_ DISM_PROGRESS_CALLBACK Progress, _In_opt_ PVOID UserData);
             </remarks>
        </member>
        <member name="M:Microsoft.Dism.DismApi.AddDriver(Microsoft.Dism.DismSession,System.String,System.Boolean)">
            <summary>
            Adds a third party driver (.inf) to an offline Windows® image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="driverPath">A relative or absolute path to the driver .inf file.</param>
            <param name="forceUnsigned">Indicates whether to accept unsigned drivers to an x64-based image. Unsigned drivers will automatically be added to an x86-based image.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.AddDriversEx(Microsoft.Dism.DismSession,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds third party drivers (.inf) from the specified directory to an offline Windows® image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="driverDirectory">A relative or absolute path to a directory containing driver .inf files.</param>
            <param name="forceUnsigned">Indicates whether to accept unsigned drivers to an x64-based image. Unsigned drivers will automatically be added to an x86-based image.</param>
            <param name="recursive"><code>true</code> to search recursively for driver files, otherwise <code>false</code>.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified by the <paramref name="driverDirectory" /> parameter does not exist.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.AddPackage(Microsoft.Dism.DismSession,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a single .cab or .msu file to a Windows® image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenSession method.</param>
            <param name="packagePath">A relative or absolute path to the .cab or .msu file being added or a folder containing the expanded files of a single .cab file.</param>
            <param name="ignoreCheck">Specifies whether to ignore the internal applicability checks that are done when a package is added.</param>
            <param name="preventPending">Specifies whether to add a package if it has pending online actions.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
            <exception cref="T:Microsoft.Dism.DismPackageNotApplicableException">When the package is not applicable to the specified session.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.AddPackage(Microsoft.Dism.DismSession,System.String,System.Boolean,System.Boolean,Microsoft.Dism.DismProgressCallback)">
            <summary>
            Adds a single .cab or .msu file to a Windows® image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenSession method.</param>
            <param name="packagePath">A relative or absolute path to the .cab or .msu file being added or a folder containing the expanded files of a single .cab file.</param>
            <param name="ignoreCheck">Specifies whether to ignore the internal applicability checks that are done when a package is added.</param>
            <param name="preventPending">Specifies whether to add a package if it has pending online actions.</param>
            <param name="progressCallback">A DismProgressCallback method to call when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
            <exception cref="T:Microsoft.Dism.DismPackageNotApplicableException">When the package is not applicable to the specified session.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.AddPackage(Microsoft.Dism.DismSession,System.String,System.Boolean,System.Boolean,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Adds a single .cab or .msu file to a Windows® image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenSession method.</param>
            <param name="packagePath">A relative or absolute path to the .cab or .msu file being added or a folder containing the expanded files of a single .cab file.</param>
            <param name="ignoreCheck">Specifies whether to ignore the internal applicability checks that are done when a package is added.</param>
            <param name="preventPending">Specifies whether to add a package if it has pending online actions.</param>
            <param name="progressCallback">A DismProgressCallback method to call when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
            <exception cref="T:Microsoft.Dism.DismPackageNotApplicableException">When the package is not applicable to the specified session.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.AddProvisionedAppxPackage(Microsoft.Dism.DismSession,System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Adds an app package (.appx) that will install for each new user to a Windows image.
            </summary>
            <param name="session">A valid DISM Session.</param>
            <param name="appPath">Specifies the location of the app package (.appx) to add to the Windows image.</param>
            <param name="dependencyPackages">Specifies the location of dependency packages.</param>
            <param name="licensePath">Specifies the location of the .xml file containing your application license.</param>
            <param name="customDataPath">Specifies the location of a custom data file. The custom data file will be renamed custom.data and saved in the app data store.</param>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.AddProvisionedAppxPackage(Microsoft.Dism.DismSession,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Adds an app package (.appx) that will install for each new user to a Windows image.
            </summary>
            <param name="session">A valid DISM Session.</param>
            <param name="appPath">Specifies the location of the app package (.appx) to add to the Windows image.</param>
            <param name="dependencyPackages">Specifies the location of dependency packages.</param>
            <param name="optionalPackages">Specifies the location of optional packages.</param>
            <param name="licensePaths">Specifies the locations of .xml files containing your application licenses.</param>
            <param name="customDataPath">Specifies the location of a custom data file. The custom data file will be renamed custom.data and saved in the app data store.</param>
            <param name="regions">Specifies regions for the package.</param>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.AddProvisionedAppxPackage(Microsoft.Dism.DismSession,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.String,Microsoft.Dism.DismStubPackageOption)">
            <summary>
            Adds an app package (.appx) that will install for each new user to a Windows image.
            </summary>
            <param name="session">A valid DISM Session.</param>
            <param name="appPath">Specifies the location of the app package (.appx) to add to the Windows image.</param>
            <param name="dependencyPackages">Specifies the location of dependency packages.</param>
            <param name="optionalPackages">Specifies the location of optional packages.</param>
            <param name="licensePaths">Specifies the locations of .xml files containing your application licenses.</param>
            <param name="customDataPath">Specifies the location of a custom data file. The custom data file will be renamed custom.data and saved in the app data store.</param>
            <param name="regions">Specifies regions for the package.</param>
            <param name="stubPackageOption">Specifies the stub package option.</param>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.ApplyFfuImage(System.String,System.String)">
            <summary>
            Applies an .ffu image to a specified physical drive.
            </summary>
            <param name="imagePath">The path to the .ffu image file to apply.</param>
            <param name="applyPath">The drive to apply the image to, for example \\.\PhysicalDrive0</param>
        </member>
        <member name="M:Microsoft.Dism.DismApi.ApplyFfuImage(System.String,System.String,System.String)">
            <summary>
            Applies an .ffu image to a specified physical drive.
            </summary>
            <param name="imagePath">The path to the .ffu image file to apply.</param>
            <param name="applyPath">The drive to apply the image to, for example \\.\PhysicalDrive0</param>
            <param name="partPath">An optional pattern for split FFU files that matches the naming convention.</param>
        </member>
        <member name="M:Microsoft.Dism.DismApi.ApplyUnattend(Microsoft.Dism.DismSession,System.String,System.Boolean)">
            <summary>
            Applies an unattended answer file to a Windows® image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="unattendFile">A relative or absolute path to the answer file that will be applied to the image.</param>
            <param name="singleSession">Specifies whether the packages that are listed in an answer file will be processed in a single session or in multiple sessions.</param>
        </member>
        <member name="M:Microsoft.Dism.DismApi.CheckImageHealth(Microsoft.Dism.DismSession,System.Boolean)">
            <summary>
            Checks whether the image can be serviced or whether it is corrupted.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="scanImage">Specifies whether to scan the image or just check for flags from a previous scan.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismImageHealthState" /> indicating the health state of the image.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.CheckImageHealth(Microsoft.Dism.DismSession,System.Boolean,Microsoft.Dism.DismProgressCallback)">
            <summary>
            Checks whether the image can be serviced or whether it is corrupted.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="scanImage">Specifies whether to scan the image or just check for flags from a previous scan.</param>
            <param name="progressCallback">A DismProgressCallback method to call when progress is made.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismImageHealthState" /> indicating the health state of the image.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.CheckImageHealth(Microsoft.Dism.DismSession,System.Boolean,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Checks whether the image can be serviced or whether it is corrupted.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="scanImage">Specifies whether to scan the image or just check for flags from a previous scan.</param>
            <param name="progressCallback">A DismProgressCallback method to call when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismImageHealthState" /> indicating the health state of the image.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.CleanupMountpoints">
            <summary>
            Removes files and releases resources associated with corrupted or invalid mount paths.
            </summary>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.CloseSession(Microsoft.Dism.DismSession)">
            <summary>
            Closes a DISMSession created by <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method. This function does not unmount the image. To unmount the image, use the <see cref="M:Microsoft.Dism.DismApi.UnmountImage(System.String,System.Boolean)" /> method once all sessions are closed.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> or <see cref="M:Microsoft.Dism.DismApi.OpenOnlineSession" />method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.CommitImage(Microsoft.Dism.DismSession,System.Boolean)">
            <summary>
            Commits the changes made to a Windows® image in a mounted .wim or .vhd file.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="discardChanges">true or false to discard changes made to the image.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.CommitImage(Microsoft.Dism.DismSession,System.Boolean,Microsoft.Dism.DismProgressCallback)">
            <summary>
            Commits the changes made to a Windows® image in a mounted .wim or .vhd file.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="discardChanges">true or false to discard changes made to the image.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.CommitImage(Microsoft.Dism.DismSession,System.Boolean,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Commits the changes made to a Windows® image in a mounted .wim or .vhd file.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="discardChanges">true or false to discard changes made to the image.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.Delete(System.IntPtr)">
            <summary>
            Releases resources held by a structure or an array of structures returned by other DISM API functions.
            </summary>
            <param name="handle">A pointer to the structure, or array of structures, to be deleted. The structure must have been returned by an earlier call to a DISM API function.</param>
        </member>
        <member name="M:Microsoft.Dism.DismApi.DisableFeature(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean)">
             <summary>
             Disables a feature in the current image.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="featureName">The name of the feature that you want to disable. To disable more than one feature, separate each feature name with a semicolon.</param>
             <param name="packageName">Optional. The name of the parent package that the feature is a part of.
            
             This is an optional parameter. If no package is specified, then the default Windows® Foundation package is used.</param>
             <param name="removePayload">Specifies whether to remove the files required to enable the feature.</param>
             <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
             <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.DisableFeature(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean,Microsoft.Dism.DismProgressCallback)">
             <summary>
             Disables a feature in the current image.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="featureName">The name of the feature that you want to disable. To disable more than one feature, separate each feature name with a semicolon.</param>
             <param name="packageName">Optional. The name of the parent package that the feature is a part of.
            
             This is an optional parameter. If no package is specified, then the default Windows® Foundation package is used.</param>
             <param name="removePayload">Specifies whether to remove the files required to enable the feature.</param>
             <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
             <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
             <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
             <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.DisableFeature(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean,Microsoft.Dism.DismProgressCallback,System.Object)">
             <summary>
             Disables a feature in the current image.
             </summary>
             <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
             <param name="featureName">The name of the feature that you want to disable. To disable more than one feature, separate each feature name with a semicolon.</param>
             <param name="packageName">Optional. The name of the parent package that the feature is a part of.
            
             This is an optional parameter. If no package is specified, then the default Windows® Foundation package is used.</param>
             <param name="removePayload">Specifies whether to remove the files required to enable the feature.</param>
             <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
             <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
             <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
             <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
             <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeatureByPackageName(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Enables a feature from the specified package name.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="packageName">The name of the package that contains the feature.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeatureByPackageName(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Enables a feature from the specified package name.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="packageName">The name of the package that contains the feature.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <param name="sourcePaths">A list of source locations to check for files needed to enable the feature.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeatureByPackageName(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Microsoft.Dism.DismProgressCallback)">
            <summary>
            Enables a feature from the specified package name.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="packageName">The name of the package that contains the feature.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <param name="sourcePaths">A list of source locations to check for files needed to enable the feature.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeatureByPackageName(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Enables a feature from the specified package name.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="packageName">The name of the package that contains the feature.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <param name="sourcePaths">A list of source locations to check for files needed to enable the feature.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeatureByPackagePath(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Enables a feature from the specified package path.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="packagePath">The path of the package that contains the feature.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeatureByPackagePath(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Enables a feature from the specified package path.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="packagePath">The path of the package that contains the feature.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <param name="sourcePaths">A list of source locations to check for files needed to enable the feature.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeatureByPackagePath(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Microsoft.Dism.DismProgressCallback)">
            <summary>
            Enables a feature from the specified package path.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="packagePath">The path of the package that contains the feature.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <param name="sourcePaths">A list of source locations to check for files needed to enable the feature.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeatureByPackagePath(Microsoft.Dism.DismSession,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Enables a feature from the specified package path.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="packagePath">The path of the package that contains the feature.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <param name="sourcePaths">A list of source locations to check for files needed to enable the feature.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeature(Microsoft.Dism.DismSession,System.String,System.Boolean,System.Boolean)">
            <summary>
            Enables a feature from the specified package path.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeature(Microsoft.Dism.DismSession,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Enables a feature from the specified package path.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <param name="sourcePaths">A list of source locations to check for files needed to enable the feature.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeature(Microsoft.Dism.DismSession,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Microsoft.Dism.DismProgressCallback)">
            <summary>
            Enables a feature from the specified package path.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <param name="sourcePaths">A list of source locations to check for files needed to enable the feature.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeature(Microsoft.Dism.DismSession,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Enables a feature from the specified package path.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <param name="sourcePaths">A list of source locations to check for files needed to enable the feature.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.EnableFeature(Microsoft.Dism.DismSession,System.String,System.String,Microsoft.Dism.DismPackageIdentifier,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Enables a feature from the specified package path.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that is being enabled. To enable more than one feature, separate each feature name with a semicolon.</param>
            <param name="identifier">A package name or absolute path.</param>
            <param name="packageIdentifier">A DismPackageIdentifier value.</param>
            <param name="limitAccess">Specifies whether Windows Update (WU) should be contacted as a source location for downloading files if none are found in other specified locations. Before checking WU, DISM will check for the files in the SourcePaths provided and in any locations specified in the registry by group policy. If the files required to enable the feature are still present on the computer, this flag is ignored.</param>
            <param name="enableAll">Specifies whether to enable all dependencies of the feature. If the specified feature or any one of its dependencies cannot be enabled, none of them will be changed from their existing state.</param>
            <param name="sourcePaths">A list of source locations to check for files needed to enable the feature.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetCapabilities(Microsoft.Dism.DismSession)">
            <summary>
            Gets DISM capabilities.
            </summary>
            <param name="session">A valid DismSession. The DismSession must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismCapabilityCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismCapability" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetCapabilityInfo(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Gets DISM capability info.
            </summary>
            <param name="session">A valid DismSession. The DismSession must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="capabilityName">The name of the specified capability.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismCapabilityInfo" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetDriverInfo(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Gets information about an .inf file in a specified image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="driverPath">A relative or absolute path to the driver .inf file.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismDriverCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismDriver" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetDriverInfo(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismDriverPackage@)">
            <summary>
            Gets information about an .inf file in a specified image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="driverPath">A relative or absolute path to the driver .inf file.</param>
            <param name="driverPackage">Receives a <see cref="T:Microsoft.Dism.DismDriverPackage" /> containing information about the driver package if available.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismDriverCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismDriver" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetDrivers(Microsoft.Dism.DismSession,System.Boolean)">
            <summary>
            Gets the drivers in an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the <see cref="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)" /> method.</param>
            <param name="allDrivers">true or false to specify to retrieve all drivers or just out-of-box drivers.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismDriverPackageCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismDriverPackage" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetFeatureInfo(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Gets detailed information for the specified feature.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that you want to get more information about.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismFeatureInfo" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetFeatureInfoByPackageName(Microsoft.Dism.DismSession,System.String,System.String)">
            <summary>
            Gets detailed information for the specified feature.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that you want to get more information about.</param>
            <param name="packageName">The package name.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismFeatureInfo" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetFeatureInfoByPackagePath(Microsoft.Dism.DismSession,System.String,System.String)">
            <summary>
            Gets detailed information for the specified feature.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that you want to get more information about.</param>
            <param name="packagePath">An absolute path to a package.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismFeatureInfo" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetFeatureInfo(Microsoft.Dism.DismSession,System.String,System.String,Microsoft.Dism.DismPackageIdentifier)">
            <summary>
            Gets detailed information for the specified feature.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="featureName">The name of the feature that you want to get more information about.</param>
            <param name="identifier">Either an absolute path to a .cab file or the package name, depending on the packageIdentifier parameter value.</param>
            <param name="packageIdentifier">A valid DismPackageIdentifier Enumeration value.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismFeatureInfo" /> object.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetFeatureParentByName(Microsoft.Dism.DismSession,System.String,System.String)">
            <summary>
            Gets the parent features of a specified feature.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenSession Function.</param>
            <param name="featureName">The name of the feature that you want to find the parent of.</param>
            <param name="packageName">The name of the package that contains the feature.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismFeatureCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismFeature" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetFeatureParentByPath(Microsoft.Dism.DismSession,System.String,System.String)">
            <summary>
            Gets the parent features of a specified feature.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenSession Function.</param>
            <param name="featureName">The name of the feature that you want to find the parent of.</param>
            <param name="packagePath">An absolute path to a .cab file.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismFeatureCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismFeature" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetFeatureParent(Microsoft.Dism.DismSession,System.String,System.String,Microsoft.Dism.DismPackageIdentifier)">
            <summary>
            Gets the parent features of a specified feature.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenSession Function.</param>
            <param name="featureName">The name of the feature that you want to find the parent of.</param>
            <param name="identifier">Either an absolute path to a .cab file or the package name, depending on the PackageIdentifier parameter value.</param>
            <param name="packageIdentifier">Optional. A valid DismPackageIdentifier Enumeration value.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismFeatureCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismFeature" /> objects.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetFeatures(Microsoft.Dism.DismSession)">
            <summary>
            Gets all the features in an image, regardless of whether the features are enabled or disabled.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismFeatureCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismFeature" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetFeaturesByPackageName(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Gets all the features in an image, regardless of whether the features are enabled or disabled.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="packageName">The name of the package to get features of.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismFeatureCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismFeature" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetFeaturesByPackagePath(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Gets all the features in an image, regardless of whether the features are enabled or disabled.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            /// <param name="packagePath">The path of the package to get features of.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismFeatureCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismFeature" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetFeatures(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismPackageIdentifier)">
            <summary>
            Gets all the features in an image, regardless of whether the features are enabled or disabled.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="identifier">Optional. Either an absolute path to a .cab file or the package name, depending on the packageIdentifier parameter value.</param>
            <param name="packageIdentifier">A valid DismPackageIdentifier Enumeration value.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismFeatureCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismFeature" /> objects.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetImageInfo(System.String)">
            <summary>
            Gets a collection of images contained in the specified .wim or .vhd file.
            </summary>
            <param name="imageFilePath">// Clean up</param>
            <returns>A <see cref="T:Microsoft.Dism.DismImageInfoCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismImageInfo" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetLastErrorMessage">
            <summary>
            Gets the error message in the current thread immediately after a failure.
            </summary>
            <returns>An error message if one is found, otherwise <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetMountedImages">
            <summary>
            Gets a list of images that are currently mounted.
            </summary>
            <returns>A <see cref="T:Microsoft.Dism.DismMountedImageInfoCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismMountedImageInfo" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetPackageInfoByName(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Gets extended information about a package.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenImageSession Function.</param>
            <param name="packageName">The name of the package to get information about.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismPackageInfo" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetPackageInfoByPath(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Gets extended information about a package.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenImageSession Function.</param>
            <param name="packagePath">An absolute path to a .cab file or to a folder containing an expanded package.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismPackageInfo" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetPackageInfo(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismPackageIdentifier)">
            <summary>
            Gets extended information about a package.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenImageSession Function.</param>
            <param name="identifier">Either an absolute path to a .cab file or the package name, depending on the PackageIdentifier parameter value.</param>
            <param name="packageIdentifier">A valid DismPackageIdentifier Enumeration value.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismPackageInfo" /> object.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetPackageInfoExByName(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Gets extended information about a package.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenImageSession Function.</param>
            <param name="packageName">The name of the package to get information about.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismPackageInfoEx" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetPackageInfoExByPath(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Gets extended information about a package.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenImageSession Function.</param>
            <param name="packagePath">An absolute path to a .cab file or to a folder containing an expanded package.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismPackageInfoEx" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetPackageInfoEx(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismPackageIdentifier)">
            <summary>
            Gets extended information about a package.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the OpenImageSession Function.</param>
            <param name="identifier">Either an absolute path to a .cab file or the package name, depending on the PackageIdentifier parameter value.</param>
            <param name="packageIdentifier">A valid DismPackageIdentifier Enumeration value.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismPackageInfoEx" /> object.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetPackages(Microsoft.Dism.DismSession)">
            <summary>
            Gets a collection of each package in an image and provides basic information about each package, such as the package name and type of package.
            </summary>
            <param name="session">A valid DISM Session. The DismSession must be associated with an image.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismPackageCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismPackage" />objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.GetProvisionedAppxPackages(Microsoft.Dism.DismSession)">
            <summary>
            Gets information about app packages (.appx) in an image that will be installed for each new user.
            </summary>
            <param name="session">A valid DISM Session.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismAppxPackageCollection" /> object containing a collection of <see cref="T:Microsoft.Dism.DismAppxPackage" /> objects.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="F:Microsoft.Dism.DismApi.InitializeShutDownLock">
            <summary>
            Used to lock when initializing or shutting down.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi._isInitialized">
            <summary>
            Used to keep track if DismApi has been initialized.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismApi.Initialize(Microsoft.Dism.DismLogLevel)">
            <summary>
            Initializes DISM API. Initialize must be called once per process before calling any other DISM API functions.
            </summary>
            <param name="logLevel">Indicates the level of logging.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.Initialize(Microsoft.Dism.DismLogLevel,System.String)">
            <summary>
            Initializes DISM API. Initialize must be called once per process before calling any other DISM API functions.
            </summary>
            <param name="logLevel">Indicates the level of logging.</param>
            <param name="logFilePath">A relative or absolute path to a log file. All messages generated will be logged to this path. If <see langword="null" />, the default log path, <c>%WinDir%\Logs\DISM\dism.log</c>, will be used.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.Initialize(Microsoft.Dism.DismLogLevel,System.String,System.String)">
            <summary>
            Initializes DISM API. Initialize must be called once per process before calling any other DISM API functions.
            </summary>
            <param name="logLevel">Indicates the level of logging.</param>
            <param name="logFilePath">A relative or absolute path to a log file. All messages generated will be logged to this path. If <see langword="null" />, the default log path, <c>%WinDir%\Logs\DISM\dism.log</c>, will be used.</param>
            <param name="scratchDirectory">A relative or absolute path to a scratch directory. DISM API will use this directory for internal operations. If <see langword="null" />, the default temp directory, <c>%WinDir%\Temp</c>, will be used.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.Int32)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageIndex">The index of the image in the WIM file that you want to mount. For a VHD file, you must specify an index of 1.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageIndex">The index of the image in the WIM file that you want to mount. For a VHD file, you must specify an index of 1.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.Int32,System.Boolean,Microsoft.Dism.DismMountImageOptions)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageIndex">The index of the image in the WIM file that you want to mount. For a VHD file, you must specify an index of 1.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <param name="options">Specifies options to use when mounting an image.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.Int32,System.Boolean,Microsoft.Dism.DismProgressCallback)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageIndex">The index of the image in the WIM file that you want to mount. For a VHD file, you must specify an index of 1.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.Int32,System.Boolean,Microsoft.Dism.DismMountImageOptions,Microsoft.Dism.DismProgressCallback)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageIndex">The index of the image in the WIM file that you want to mount. For a VHD file, you must specify an index of 1.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <param name="options">Specifies options to use when mounting an image.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.Int32,System.Boolean,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageIndex">The index of the image in the WIM file that you want to mount. For a VHD file, you must specify an index of 1.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.Int32,System.Boolean,Microsoft.Dism.DismMountImageOptions,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageIndex">The index of the image in the WIM file that you want to mount. For a VHD file, you must specify an index of 1.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <param name="options">Specifies options to use when mounting an image.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.String)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageName">The name of the image that you want to mount.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageName">The name of the image that you want to mount.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.String,System.Boolean,Microsoft.Dism.DismMountImageOptions)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageName">The name of the image that you want to mount.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <param name="options">Specifies options to use when mounting an image.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.String,System.Boolean,Microsoft.Dism.DismProgressCallback)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageName">The name of the image that you want to mount.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.String,System.Boolean,Microsoft.Dism.DismMountImageOptions,Microsoft.Dism.DismProgressCallback)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageName">The name of the image that you want to mount.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <param name="options">Specifies options to use when mounting an image.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.String,System.Boolean,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageName">The name of the image that you want to mount.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.String,System.Boolean,Microsoft.Dism.DismMountImageOptions,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageName">The name of the image that you want to mount.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <param name="options">Specifies options to use when mounting an image.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.MountImage(System.String,System.String,System.Int32,System.String,Microsoft.Dism.DismImageIdentifier,System.Boolean,Microsoft.Dism.DismMountImageOptions,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Mounts a WIM or VHD image file to a specified location.
            </summary>
            <param name="imageFilePath">The path to the WIM or VHD file on the local computer. A .wim, .vhd, or .vhdx file name extension is required.</param>
            <param name="mountPath">The path of the location where the image should be mounted. This mount path must already exist on the computer. The Windows image in a .wim, .vhd, or .vhdx file can be mounted to an empty folder on an NTFS formatted drive. A Windows image in a .vhd or .vhdx file can also be mounted to an unassigned drive letter. You cannot mount an image to the root of the existing drive.</param>
            <param name="imageIndex">The index of the image in the WIM file that you want to mount. For a VHD file, you must specify an index of 1.</param>
            <param name="imageName">The name of the image that you want to mount.</param>
            <param name="imageIdentifier">A DismImageIdentifier Enumeration value such as DismImageIndex.</param>
            <param name="readOnly">Specifies if the image should be mounted in read-only mode.</param>
            <param name="options">Specifies options to use when mounting an image.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
        </member>
        <member name="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String)">
            <summary>
            Associates an offline Windows image with a DISMSession.
            </summary>
            <param name="imagePath">An absolute or relative path to the root directory of an offline Windows image or an absolute or relative path to the root directory of a mounted Windows image.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismSession" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.OpenOfflineSession(System.String,System.String,System.String)">
            <summary>
            Associates an offline Windows image with a DISMSession.
            </summary>
            <param name="imagePath">An absolute or relative path to the root directory of an offline Windows image or an absolute or relative path to the root directory of a mounted Windows image.</param>
            <param name="windowsDirectory">A relative or absolute path to the Windows directory. The path is relative to the mount point.</param>
            <param name="systemDrive">The letter of the system drive that contains the boot manager. If <paramref name="systemDrive" /> is <see langword="null" />, the default value of the drive containing the mount point is used.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismSession" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.OpenOnlineSession">
            <summary>
            Associates an online Windows image with a DISMSession.
            </summary>
            <returns>A <see cref="T:Microsoft.Dism.DismSession" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.OpenSession(System.String,System.String,System.String,Microsoft.Dism.DismSessionOptions)">
            <summary>
            Associates an offline or online Windows image with a DISMSession.
            </summary>
            <param name="imagePath">An absolute or relative path to the root directory of an offline Windows image, an absolute or relative path to the root directory of a mounted Windows image, or DISM_ONLINE_IMAGE to associate with the online Windows installation.</param>
            <param name="windowsDirectory">A relative or absolute path to the Windows directory. The path is relative to the mount point.</param>
            <param name="systemDrive">The letter of the system drive that contains the boot manager. If <paramref name="systemDrive" /> is <see langword="null" />, the default value of the drive containing the mount point is used.</param>
            <param name="options">A <see cref="T:Microsoft.Dism.DismSessionOptions" /> object that contains the options for the session.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismSession" /> object.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.OpenOfflineSessionEx(System.String)">
            <summary>
            Associates an offline Windows image with a DISMSession.
            </summary>
            <param name="imagePath">An absolute or relative path to the root directory of an offline Windows image or an absolute or relative path to the root directory of a mounted Windows image.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismSession" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.OpenOfflineSessionEx(System.String,Microsoft.Dism.DismSessionOptions)">
            <summary>
            Associates an offline Windows image with a DISMSession.
            </summary>
            <param name="imagePath">An absolute or relative path to the root directory of an offline Windows image or an absolute or relative path to the root directory of a mounted Windows image.</param>
            <param name="options">A <see cref="T:Microsoft.Dism.DismSessionOptions" /> object that contains the options for the session.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismSession" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.OpenOfflineSessionEx(System.String,System.String,System.String,Microsoft.Dism.DismSessionOptions)">
            <summary>
            Associates an offline Windows image with a DISMSession.
            </summary>
            <param name="imagePath">An absolute or relative path to the root directory of an offline Windows image or an absolute or relative path to the root directory of a mounted Windows image.</param>
            <param name="windowsDirectory">A relative or absolute path to the Windows directory. The path is relative to the mount point.</param>
            <param name="systemDrive">The letter of the system drive that contains the boot manager. If <paramref name="systemDrive" /> is <see langword="null" />, the default value of the drive containing the mount point is used.</param>
            <param name="options">A <see cref="T:Microsoft.Dism.DismSessionOptions" /> object that contains the options for the session.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismSession" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.OpenOnlineSessionEx(Microsoft.Dism.DismSessionOptions)">
            <summary>
            Associates an online Windows image with a DISMSession.
            </summary>
            <param name="options">A <see cref="T:Microsoft.Dism.DismSessionOptions" /> object that contains the options for the session.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismSession" /> object.</returns>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemountImage(System.String)">
             <summary>
             Remounts a Windows image from the .wim or .vhd file that was previously mounted at the path specified by MountPath.  Use the DismOpenSession Function to associate the image with a DISMSession after it is remounted.
            
             You can use the DismRemountImage function when the image is in the DismMountStatusNeedsRemount state, as described by the DismMountStatus Enumeration. The image may enter this state if it is mounted and then a reboot occurs.
             </summary>
             <param name="mountPath">A relative or absolute path to the mount directory of the image.</param>
             <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemoveCapability(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Removes the capability from an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="capabilityName">The name of the capability that is being removed</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemoveCapability(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Removes the capability from an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="capabilityName">The name of the capability that is being removed</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemoveDriver(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Removes an out-of-box driver from an offline image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="driverPath">The published file name of the driver that has been added to the image, for example OEM1.inf. You can use the GetDrivers method to get the published name of the driver.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemovePackageByName(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Removes a package from an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="packageName">The package name.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemovePackageByName(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismProgressCallback)">
            <summary>
            Removes a package from an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="packageName">The package name.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemovePackageByName(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Removes a package from an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="packageName">The package name.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemovePackageByPath(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Removes a package from an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="packagePath">The package path.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemovePackageByPath(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismProgressCallback)">
            <summary>
            Removes a package from an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="packagePath">The package path.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemovePackageByPath(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Removes a package from an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="packagePath">The package path.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemovePackage(Microsoft.Dism.DismSession,System.String,Microsoft.Dism.DismPackageIdentifier,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Removes a package from an image.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="identifier">Either an absolute path to a .cab file or the package name, depending on the PackageIdentifier parameter value.</param>
            <param name="packageIdentifier">A DismPackageIdentifier Enumeration.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RemoveProvisionedAppxPackage(Microsoft.Dism.DismSession,System.String)">
            <summary>
            Removes an app package (.appx) from a Windows image.
            </summary>
            <param name="session">A valid DISM Session.</param>
            <param name="packageName">Specifies the name of the app package (.appx) to remove from the Windows image.</param>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RestoreImageHealth(Microsoft.Dism.DismSession,System.Boolean)">
            <summary>
            Repairs a corrupted image that has been identified as repairable by the CheckImageHealth Function.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="limitAccess">Specifies whether the RestoreImageHealth method should contact Windows Update (WU) as a source location for downloading repair files. Before checking WU, DISM will check for the files in the sourcePaths provided and in any locations specified in the registry by Group Policy. If the files that are required to enable the feature are found in these other specified locations, this flag is ignored.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RestoreImageHealth(Microsoft.Dism.DismSession,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Repairs a corrupted image that has been identified as repairable by the CheckImageHealth Function.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="limitAccess">Specifies whether the RestoreImageHealth method should contact Windows Update (WU) as a source location for downloading repair files. Before checking WU, DISM will check for the files in the sourcePaths provided and in any locations specified in the registry by Group Policy. If the files that are required to enable the feature are found in these other specified locations, this flag is ignored.</param>
            <param name="sourcePaths">List of source locations to check for repair files.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RestoreImageHealth(Microsoft.Dism.DismSession,System.Boolean,System.Collections.Generic.List{System.String},Microsoft.Dism.DismProgressCallback)">
            <summary>
            Repairs a corrupted image that has been identified as repairable by the CheckImageHealth Function.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="limitAccess">Specifies whether the RestoreImageHealth method should contact Windows Update (WU) as a source location for downloading repair files. Before checking WU, DISM will check for the files in the sourcePaths provided and in any locations specified in the registry by Group Policy. If the files that are required to enable the feature are found in these other specified locations, this flag is ignored.</param>
            <param name="sourcePaths">List of source locations to check for repair files.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.RestoreImageHealth(Microsoft.Dism.DismSession,System.Boolean,System.Collections.Generic.List{System.String},Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Repairs a corrupted image that has been identified as repairable by the CheckImageHealth Function.
            </summary>
            <param name="session">A valid DISM Session. The DISM Session must be associated with an image. You can associate a session with an image by using the DismOpenSession Function.</param>
            <param name="limitAccess">Specifies whether the RestoreImageHealth method should contact Windows Update (WU) as a source location for downloading repair files. Before checking WU, DISM will check for the files in the sourcePaths provided and in any locations specified in the registry by Group Policy. If the files that are required to enable the feature are found in these other specified locations, this flag is ignored.</param>
            <param name="sourcePaths">List of source locations to check for repair files.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
            <exception cref="T:Microsoft.Dism.DismRebootRequiredException">When the operation requires a reboot to complete.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.Shutdown">
            <summary>
            Shuts down DISM API. Shutdown must be called once per process. Other DISM API function calls will fail after Shutdown has been called.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismApi.SplitFfuImage(System.String,System.String,System.Int64)">
            <summary>
            Splits an existing .ffu file into multiple read-only split FFU files.
            </summary>
            <param name="imagePath">The path to the FFU image to split.</param>
            <param name="partPath">The path to the split file to create.</param>
            <param name="partSize">The maximum size in megabytes (MB) for each created file.</param>
        </member>
        <member name="M:Microsoft.Dism.DismApi.UnmountImage(System.String,System.Boolean)">
            <summary>
            Unmounts a Windows image from a specified location.
            </summary>
            <param name="mountPath">A relative or absolute path to the mount directory of the image.</param>
            <param name="commitChanges">Specifies whether or not the changes to the image should be saved.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.UnmountImage(System.String,System.Boolean,Microsoft.Dism.DismProgressCallback)">
            <summary>
            Unmounts a Windows image from a specified location.
            </summary>
            <param name="mountPath">A relative or absolute path to the mount directory of the image.</param>
            <param name="commitChanges">Specifies whether or not the changes to the image should be saved.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.UnmountImage(System.String,System.Boolean,Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Unmounts a Windows image from a specified location.
            </summary>
            <param name="mountPath">A relative or absolute path to the mount directory of the image.</param>
            <param name="commitChanges">Specifies whether or not the changes to the image should be saved.</param>
            <param name="progressCallback">A progress callback method to invoke when progress is made.</param>
            <param name="userData">Optional user data to pass to the DismProgressCallback method.</param>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
            <exception cref="T:System.OperationCanceledException">When the user requested the operation be canceled.</exception>
        </member>
        <member name="P:Microsoft.Dism.DismApi.CurrentDismGeneration">
            <summary>
            Gets or sets the DISM Generational Library initialized for use with the DismApi Wrapper (via InitializeEx()). Returns the specific DismGeneration in use; otherwise, returns DismGeneration.NotFound.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismApi.InitializeEx(Microsoft.Dism.DismLogLevel)">
            <summary>
            Initializes DISM API, using the latest installed DISM Generation. Initialize must be called once per process before calling any other DISM API functions.
            </summary>
            <param name="logLevel">Indicates the level of logging.</param>
            <exception cref="T:System.Exception">If an error occurs loading the latest DISM Generational Library.</exception>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.InitializeEx(Microsoft.Dism.DismLogLevel,System.String)">
            <summary>
            Initializes DISM API, using the latest installed DISM Generation. Initialize must be called once per process before calling any other DISM API functions.
            </summary>
            <param name="logLevel">Indicates the level of logging.</param>
            <param name="logFilePath">A relative or absolute path to a log file. All messages generated will be logged to this path. If <see langword="null" />, the default log path, %windir%\Logs\DISM\dism.log, will be used.</param>
            <exception cref="T:System.Exception">If an error occurs loading the latest DISM Generational Library.</exception>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.InitializeEx(Microsoft.Dism.DismLogLevel,System.String,System.String)">
            <summary>
            Initializes DISM API, using the latest installed DISM Generation. Initialize must be called once per process before calling any other DISM API functions.
            </summary>
            <param name="logLevel">Indicates the level of logging.</param>
            <param name="logFilePath">A relative or absolute path to a log file. All messages generated will be logged to this path. If <see langword="null" />, the default log path, %windir%\Logs\DISM\dism.log, will be used.</param>
            <param name="scratchDirectory">A relative or absolute path to a scratch directory. DISM API will use this directory for internal operations. If <see langword="null" />, the default temp directory, <c>%WinDir%\Temp</c>, will be used.</param>
            /// <exception cref="T:System.Exception">If an error occurs loading the latest DISM Generational Library.</exception>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="M:Microsoft.Dism.DismApi.InitializeEx(Microsoft.Dism.DismLogLevel,System.String,System.String,Microsoft.Dism.DismGeneration)">
            <summary>
            Initializes DISM API, using the specified DISM Generation. Initialize must be called once per process before calling any other DISM API functions.
            </summary>
            <param name="logLevel">Indicates the level of logging.</param>
            <param name="logFilePath">A relative or absolute path to a log file. All messages generated will be logged to this path. If <see langword="null" />, the default log path, %windir%\Logs\DISM\dism.log, will be used.</param>
            <param name="scratchDirectory">A relative or absolute path to a scratch directory. DISM API will use this directory for internal operations. If <see langword="null" />, the default temp directory, <c>%WinDir%\Temp</c>, will be used.</param>
            <param name="dismGeneration">The DISM Generational Library to be used.</param>
            /// <exception cref="T:System.Exception">If an error occurs loading the latest DISM Generational Library.</exception>
            <exception cref="T:Microsoft.Dism.DismException">When a failure occurs.</exception>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismAppxPackage_">
            <summary>
            This struct is currently undocumented.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismAppxPackage_.PackageName">
            <summary>
            The name of the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismAppxPackage_.DisplayName">
            <summary>
            The display name of the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismAppxPackage_.PublisherId">
            <summary>
            The publisher ID.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismAppxPackage_.MajorVersion">
            <summary>
            The major version.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismAppxPackage_.MinorVersion">
            <summary>
            The minor version.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismAppxPackage_.Build">
            <summary>
            The build version.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismAppxPackage_.Revision">
            <summary>
            The revision version.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismAppxPackage_.Architecture">
            <summary>
            The architecture of the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismAppxPackage_.ResourceId">
            <summary>
            The resource ID.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismAppxPackage_.InstallLocation">
            <summary>
            The installation location.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismAppxPackage_.Regions">
            <summary>
            The region of the package.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismCapability_">
            <summary>
            Describes capability basic information.
            </summary>
            <remarks>
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt684921(v=vs.85).aspx" />
            typedef struct _DismCapability {
              PCWSTR Name;
              DismPackageFeatureState State;
            } DismCapability;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismCapability_.Name">
            <summary>
            The manufacturer name of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismCapability_.State">
            <summary>
            A hardware description of the driver.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismCapabilityInfo_">
            <summary>
            Describes information about a capability.
            </summary>
            <remarks>
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt684922.aspx" />
            typedef struct _DismCapabilityInfo {
                PCWSTR Name;
                DismPackageFeatureState State;
                PCWSTR DisplayName;
                PCWSTR Description;
                DWORD DownloadSize;
                DWORD InstallSize;
            } DismCapabilityInfo;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismCapabilityInfo_.Name">
            <summary>
            The name of the capability.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismCapabilityInfo_.State">
            <summary>
            The state of the capability.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismCapabilityInfo_.DisplayName">
            <summary>
            The display name of the capability.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismCapabilityInfo_.Description">
            <summary>
            The description of the capability.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismCapabilityInfo_.DownloadSize">
            <summary>
            The download size of the capability in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismCapabilityInfo_.InstallSize">
            <summary>
            The install size of the capability in bytes.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismCustomProperty_">
            <summary>
            Describes the custom properties of a package. Custom properties are any properties that are not found in DismPackage Structure or DismFeature Structure.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824746.aspx" />
            typedef struct _DismCustomProperty
            {
                PCWSTR Name;
                PCWSTR Value;
                PCWSTR Path;
            } DismCustomProperty;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismCustomProperty_.Name">
            <summary>
            The name of the custom property.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismCustomProperty_.Value">
            <summary>
            The value of the custom property.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismCustomProperty_.Path">
            <summary>
            The value of the custom property.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismDriver_">
            <summary>
            Describes the architecture and hardware that the driver supports. The DismGetDriverInfo Function returns an object that includes an array of DismDriver structures. If you specify a DriverPath using the published name of the driver installed in the image, for example OEM1.inf, the array includes only the applicable hardware and architectures that are installed in the image. You can also specify a DriverPath using the source location of an .inf file on the technician computer. If you use the source location, the array includes all of the supported architectures and hardware that exist in the .inf file before it is installed to an architecture-specific image.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824796.aspx" />
            typedef struct _DismDriver
            {
                PCWSTR ManufacturerName;
                PCWSTR HardwareDescription;
                PCWSTR HardwareId;
                WORD Architecture;
                PCWSTR ServiceName;
                PCWSTR CompatibleIds;
                PCWSTR ExcludeIds;
            } DismDriverInfo;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriver_.ManufacturerName">
            <summary>
            The manufacturer name of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriver_.HardwareDescription">
            <summary>
            A hardware description of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriver_.HardwareId">
            <summary>
            The hardware ID of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriver_.Architecture">
            <summary>
            The architecture of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriver_.ServerName">
            <summary>
            The service name of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriver_.CompatibleIds">
            <summary>
            The service name of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriver_.ExcludeIds">
            <summary>
            The exclude IDs of the driver.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismDriverPackage_">
            <summary>
            Contains basic information for the driver that is associated with the .inf file.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824776.aspx" />
            typedef struct DismDriverPackage
            {
               PCWSTR PublishedName;
               PCWSTR OriginalFileName;
               BOOL InBox;
               PCWSTR CatalogFile;
               PCWSTR ClassName;
               PCWSTR ClassGuid;
               PCWSTR ClassDescription;
               BOOL BootCritical;
               DismDriverSignature DriverSignature;
               PCWSTR ProviderName;
               SYSTEMTIME Date;
               UINT MajorVersion;
               UINT MinorVersion;
               UINT Build;
               UINT Revision
            } DismDriver;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.PublishedName">
            <summary>
            The published driver name.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.OriginalFileName">
            <summary>
            The original file name of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.InBox">
            <summary>
            <see langword="true" /> if the driver is included on the Windows distribution media and automatically installed as part of Windows®, otherwise <see langword="false" />.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.CatalogFile">
            <summary>
            The catalog file for the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.ClassName">
            <summary>
            The class name of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.ClassGuid">
            <summary>
            The class GUID of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.ClassDescription">
            <summary>
            The class description of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.BootCritical">
            <summary>
            <see langword="true" /> if the driver is boot-critical, otherwise <see langword="false" />.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.DriverSignature">
            <summary>
            The driver signature status.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.ProviderName">
            <summary>
            The provider of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.Date">
            <summary>
            The manufacturer's build date of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.MajorVersion">
            <summary>
            The major version number of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.MinorVersion">
            <summary>
            The minor version number of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.Build">
            <summary>
            The build number of the driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismDriverPackage_.Revision">
            <summary>
            The revision number of the driver.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismFeature_">
            <summary>
            Describes basic information about a feature, such as the feature name and feature state.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824780.aspx" />
            typedef struct _DismFeature
            {
                PCWSTR FeatureName;
                DismPackageFeatureState State;
            } DismFeature;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismFeature_.FeatureName">
            <summary>
            The name of the feature.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismFeature_.State">
            <summary>
            A valid DismPackageFeatureState Enumeration value such as DismStateInstalled.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismFeatureInfo_">
            <summary>
            Describes advanced feature information, such as installed state and whether a restart is required after installation.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824793.aspx" />
            typedef struct _DismFeatureInfo
            {
                PCWSTR FeatureName;
                DismPackageFeatureState FeatureState;
                PCWSTR DisplayName;
                PCWSTR Description;
                DismRestartType RestartRequired;
                DismCustomProperty* CustomProperty;
                UINT CustomPropertyCount;
            } DismFeatureInfo;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismFeatureInfo_.FeatureName">
            <summary>
            The name of the feature.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismFeatureInfo_.FeatureState">
            <summary>
            A valid DismPackageFeatureState Enumeration value such as DismStateInstalled or 7.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismFeatureInfo_.DisplayName">
            <summary>
            The display name of the feature. This is not always unique across all features.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismFeatureInfo_.Description">
            <summary>
            The description of the feature.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismFeatureInfo_.RestartRequired">
            <summary>
            A DismRestartType Enumeration value such as DismRestartPossible.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismFeatureInfo_.CustomProperty">
            <summary>
            An array of DismCustomProperty Structure.m
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismFeatureInfo_.CustomPropertyCount">
            <summary>
            The number of elements in the CustomProperty array.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismImageInfo_">
            <summary>
            Describes the metadata of an image.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824797.aspx" />
            typedef struct _DismImageInfo
            {
                DismImageType ImageType;
                UINT ImageIndex;
                PCWSTR ImageName;
                PCWSTR ImageDescription;
                UINT64 ImageSize;
                UINT Architecture;
                PCWSTR ProductName;
                PCWSTR EditionId;
                PCWSTR InstallationType;
                PCWSTR Hal;
                PCWSTR ProductType;
                PCWSTR ProductSuite;
                UINT MajorVersion;
                UINT MinorVersion;
                UINT Build;
                UINT SpBuild;
                UINT SpLevel;
                DismImageBootable Bootable;
                PCWSTR SystemRoot;
                DismLanguage* Language;
                UINT LanguageCount;
                UINT DefaultLanguage Index;
                VOID* CustomizedInfo;
            } DismImageInfo;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.ImageType">
            <summary>
            A DismImageType Enumeration value such as DismImageTypeWim.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.ImageIndex">
            <summary>
            The index number, starting at 1, of the image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.ImageName">
            <summary>
            The name of the image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.ImageDescription">
            <summary>
            A description of the image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.ImageSize">
            <summary>
            The size of the image in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.Architecture">
            <summary>
            The architecture of the image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.ProductName">
            <summary>
            The name of the product, for example, "Microsoft Windows Operating System".
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.EditionId">
            <summary>
            The edition of the product, for example, "Ultimate".
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.InstallationType">
            <summary>
            A string identifying whether the installation is a Client or Server type.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.Hal">
            <summary>
            The hardware abstraction layer (HAL) type of the operating system.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.ProductType">
            <summary>
            The product type, for example, "WinNT".
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.ProductSuite">
            <summary>
            The product suite, for example, "Terminal Server".
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.MajorVersion">
            <summary>
            The major version of the operating system.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.MinorVersion">
            <summary>
            The minor version of the operating system.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.Build">
            <summary>
            The build number, for example, "7600".
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.SpBuild">
            <summary>
            The service pack build.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.SpLevel">
            <summary>
            The service pack number.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.Bootable">
            <summary>
            A DismImageBootable Enumeration value such as DismImageBootableYes.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.SystemRoot">
            <summary>
            The Windows directory.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.Language">
            <summary>
            An array of DismLanguage Structure objects representing the languages in the image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.LanguageCount">
            <summary>
            The number of elements in the language array.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.DefaultLanguageIndex">
            <summary>
            The index number of the default language.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismImageInfo_.CustomizedInfo">
            <summary>
            The customized information for the image file. A DismWimCustomizedInfo Structure type for a WIM file. <see langword="null" /> for a VHD image.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismLanguage">
            <summary>
            Describes the language of the image.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824760.aspx" />
            typedef struct _DismString
            {
                PCWSTR Value;
            } DismString;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismLanguage._value">
            <summary>
            A null-terminated Unicode string.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismApi.DismLanguage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismApi.DismLanguage" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismApi.DismLanguage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismApi.DismLanguage" /> class.
            </summary>
            <param name="value">The language.</param>
        </member>
        <member name="M:Microsoft.Dism.DismApi.DismLanguage.op_Implicit(Microsoft.Dism.DismApi.DismLanguage)~System.String">
            <summary>
            Converts a <see cref="T:Microsoft.Dism.DismApi.DismLanguage" /> class to a <see cref="T:System.String" /> object
            </summary>
            <param name="language">A DismLanguage object to convert.</param>
            <returns>The string associated with the DismLanguage</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.DismLanguage.op_Implicit(System.String)~Microsoft.Dism.DismApi.DismLanguage">
            <summary>
            Converts a <see cref="T:System.String" /> object to a <see cref="T:Microsoft.Dism.DismApi.DismLanguage" /> object.
            </summary>
            <param name="str">A string to convert.</param>
            <returns>A DismLanguage containing the specified string.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismMountedImageInfo_">
            <summary>
            Describes the metadata of a mounted image.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824755.aspx" />
            typedef struct _DismMountedImageInfo
            {
                PCWSTR MountPath;
                PCWSTR ImageFilePath;
                UINT ImageIndex;
                DismMountMode MountMode;
                DismMountStatus MountStatus;
            } DismMountedImageInfo;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismMountedImageInfo_.MountPath">
            <summary>
            A relative or absolute path to the mounted image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismMountedImageInfo_.ImageFilePath">
            <summary>
            A relative or absolute path to the image file.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismMountedImageInfo_.ImageIndex">
            <summary>
            The index number of the image. Index numbering starts at 1.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismMountedImageInfo_.MountMode">
            <summary>
            A <a href="DismMountMode" /> Enumeration value representing whether the image is DismReadWrite or DismReadOnly.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismMountedImageInfo_.MountStatus">
            <summary>
            A <a href="DismMountStatus" /> Enumeration value such as DismMountStatusOk.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismPackage_">
            <summary>
            Describes basic information about a package, including the date and time that the package was installed.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824763.aspx" />
            typedef struct _DismPackage
            {
                PCWSTR PackageName;
                DismPackageFeatureState PackageState;
                DismReleaseType ReleaseType;
                SYSTEMTIME InstallTime;
            } DismPackage;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackage_.PackageName">
            <summary>
            The package name.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackage_.PackageState">
            <summary>
            A DismPackageFeatureState Enumeration value, for example, DismStateResolved.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackage_.ReleaseType">
            <summary>
            A DismReleaseType Enumeration value, for example, DismReleaseTypeDriver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackage_.InstallTime">
            <summary>
            The date and time that the package was installed. This field is local time relative to the servicing host computer.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismPackageInfo_">
            <summary>
            Describes detailed package information such as the client used to install the package, the date and time that the package was installed, and support information.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824774.aspx" />
            typedef struct _DismPackageInfo
            {
                PCWSTR PackageName;
                DismPackageFeatureState PackageState;
                DismReleaseType ReleaseType;
                SYSTEMTIME InstallTime;
                BOOL Applicable;
                PCWSTR Copyright;
                PCWSTR Company;
                SYSTEMTIME CreationTime;
                PCWSTR DisplayName;
                PCWSTR Description;
                PCWSTR InstallClient;
                PCWSTR InstallPackageName;
                SYSTEMTIME LastUpdateTime;
                PCWSTR ProductName;
                PCWSTR ProductVersion;
                DismRestartType RestartRequired;
                DismFullyOfflineInstallableType FullyOffline;
                PCWSTR SupportInformation;
                DismCustomProperty* CustomProperty;
                UINT CustomPropertyCount;
                DismFeature* Feature;
                UINT FeatureCount;
            } DismPackageInfo;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.PackageName">
            <summary>
            The name of the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.PackageState">
            <summary>
            A DismPackageFeatureState Enumeration value such as DismStateResolved.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.ReleaseType">
            <summary>
            A DismReleaseType Enumeration value such as DismReleaseTypeUpdate.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.InstallTime">
            <summary>
            The date and time that the package was installed. This field is local time, based on the servicing host computer.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.Applicable">
            <summary>
            <see langword="true" /> if the package is applicable to the image, otherwise <see langword="false" />.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.Copyright">
            <summary>
            The copyright information of the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.Company">
            <summary>
            The company that released the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.CreationTime">
            <summary>
            The date and time that the package was created. This field is local time, based on the time zone of the computer that created the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.DisplayName">
            <summary>
            The display name of the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.Description">
            <summary>
            A description of the purpose of the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.InstallClient">
            <summary>
            The client that installed this package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.InstallPackageName">
            <summary>
            The original file name used for the package during installation.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.LastUpdateTime">
            <summary>
            The date and time when this package was last updated. This field is local time, based on the servicing host computer.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.ProductName">
            <summary>
            The product name for this package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.ProductVersion">
            <summary>
            The product version for this package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.RestartRequired">
            <summary>
            A DismRestartType Enumeration value describing whether a restart is required after installing the package on an online image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.FullyOffline">
            <summary>
            A DismFullyOfflineInstallableType Enumeration value describing whether a package can be installed offline without booting the image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.SupportInformation">
            <summary>
            A string listing additional support information for this package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.CustomProperty">
            <summary>
            An array of DismCustomProperty Structure objects representing the custom properties of the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.CustomPropertyCount">
            <summary>
            The number of elements in the CustomProperty array.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.Feature">
            <summary>
            An array of DismFeature Structure objects representing the features in the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfo_.FeatureCount">
            <summary>
            The number of elements in the Feature array.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismPackageInfoEx_">
            <summary>
            Describes detailed package information such as the client used to install the package, the date and time that the package was installed, and support information.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824774.aspx" />
            typedef struct _DismPackageInfoEx
            {
                DismPackageInfo;
                PCWSTR CapabilityId;
            } DismPackageInfoEx;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfoEx_.PackageInfo">
            <summary>
            An instance of <see cref="T:Microsoft.Dism.DismApi.DismPackageInfo_" /> containing the package info.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismPackageInfoEx_.CapabilityId">
            <summary>
            The capability ID of the package.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismProgressCallback">
            <summary>
            A client-defined callback function that DISM API uses to report progress on time-consuming operations. API functions that report progress accept a pointer to a DismProgressCallback function. DISM_PROGRESS_CALLBACK is a typedef to this function type.
            </summary>
            <param name="current">The current progress value.</param>
            <param name="total">The total progress value.</param>
            <param name="userData">User defined custom data. This parameter can be passed to another DISM function that accepts a progress callback and that function will then pass it through to DismProgressCallback.</param>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824734.aspx" />
            void DismProgressCallback(_In_ UINT Current, _In_ UINT Total, _In_ PVOID UserData)
            </remarks>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismString">
            <summary>
            DISM API functions that return strings wrap the heap allocated PCWSTR in a DismString structure.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824782.aspx" />
            typedef struct _DismString
            {
                PCWSTR Value;
            } DismString;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismString.value">
            <summary>
            A null-terminated Unicode string.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismApi.DismString.op_Implicit(Microsoft.Dism.DismApi.DismString)~System.String">
            <summary>
            Converts a <see cref="T:Microsoft.Dism.DismApi.DismString" /> class to a <see cref="T:System.String" /> object
            </summary>
            <param name="dismString">The <see cref="T:Microsoft.Dism.DismApi.DismString" /> object to convert.</param>
            <returns>The current <see cref="T:Microsoft.Dism.DismApi.DismString" /> as a <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismApi.DismString.op_Implicit(System.String)~Microsoft.Dism.DismApi.DismString">
            <summary>
            Converts a <see cref="T:System.String" /> object to a <see cref="T:Microsoft.Dism.DismApi.DismString" /> object.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The current <see cref="T:System.String" /> as a <see cref="T:Microsoft.Dism.DismApi.DismString" /> object.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismApi.DismWimCustomizedInfo_">
            <summary>
            Describes a Windows® Imaging Format (WIM) file.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824792.aspx" />
            typedef struct _DismWimCustomizedInfo
            {
                UINT Size;
                UINT DirectoryCount;
                UINT FileCount;
                SYSTEMTIME CreatedTime;
                SYSTEMTIME ModifiedTime;
            } DismWimCustomizedInfo;
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismWimCustomizedInfo_.Size">
            <summary>
            The size of the DismWimCustomizedInfo structure.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismWimCustomizedInfo_.DirectoryCount">
            <summary>
            The number of directories in the image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismWimCustomizedInfo_.FileCount">
            <summary>
            The number of files in the image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismWimCustomizedInfo_.CreatedTime">
            <summary>
            The time that the image file was created.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DismWimCustomizedInfo_.ModifiedTime">
            <summary>
            The time that the image file was last modified.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISM_COMMIT_APPEND">
            <summary>
            Indicates to the DismCommitImage Function or the DismUnmountImage Function that changes to the image should be saved.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISM_COMMIT_GENERATE_INTEGRITY">
            <summary>
            Indicates to the DismCommitImage Function or the DismUnmountImage Function to set a flag on the image specifying whether the image is corrupted.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISM_COMMIT_IMAGE">
            <summary>
            Indicates to the DismCommitImage Function or the DismUnmountImage Function that changes to the image should be saved.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISM_COMMIT_MASK">
            <summary>
            Indicates to the DismUnmountImage Function that all changes should be saved. This flag is equivalent to using DISM_COMMIT_IMAGE, DISM_COMMIT_GENERATE_INTEGRITY, and DISM_COMMIT_APPEND.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISM_DISCARD_IMAGE">
            <summary>
            Indicates to the DismCommitImage Function or the DismUnmountImage Function that changes to the image should not be saved.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISM_MOUNT_CHECK_INTEGRITY">
            <summary>
            Indicates to the DismMountImage Function to set a flag on the image specifying whether the image is corrupted.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISM_MOUNT_OPTIMIZE">
            <summary>
            Indicates to the DismMountImage Function that the image should be mounted with optimization. When the optimize option is used, only the top level of the file directory in the image will be mapped to the mount location. The first time that you access a file path that is not initially mapped, that branch of the directory will be mounted. As a result, there may be an increase in the time that is required to access a directory for the first time after mounting an image using the optimize option.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISM_MOUNT_READONLY">
            <summary>
            Indicates to the DismMountImage Function that the image should be mounted with read access only.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISM_MOUNT_READWRITE">
            <summary>
            Indicates to the DismMountImage Function that the image should be mounted with both read and write access.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISM_ONLINE_IMAGE">
            <summary>
            Indicates to the DismOpenSession Function that the online operating system, %windir%, should be associated to the DISMSession for servicing.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISM_SESSION_DEFAULT">
            <summary>
            Represents a default value for a DismSession pointer.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_BUSY">
            <summary>
            The current package and feature servicing infrastructure is busy.  Wait a bit and try the operation again.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_DISMAPI_NOT_INITIALIZED">
            <summary>
            DISM API was not initialized for this process
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_INVALID_DISM_SESSION">
            <summary>
            An invalid DismSession handle was passed into a DISMAPI function
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_INVALID_IMAGE_INDEX">
            <summary>
            An invalid image index was specified
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_INVALID_IMAGE_NAME">
            <summary>
            An invalid image name was specified
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_LOGGING_DISABLED">
            <summary>
            Failed to gain access to the log file user specified. Logging has been disabled..
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_MUST_SPECIFY_ONLINE_IMAGE">
            <summary>
            The offline image specified is the running system. The macro DISM_ONLINE_IMAGE must be
            used instead.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_NEEDS_REMOUNT">
            <summary>
            The image needs to be remounted before any servicing operation.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_OPEN_HANDLES_UNABLE_TO_MOUNT_IMAGE_PATH">
            <summary>
            A DismSession with open handles was attempted to be mounted
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_OPEN_HANDLES_UNABLE_TO_REMOUNT_IMAGE_PATH">
            <summary>
            A DismSession with open handles was attempted to be remounted
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_OPEN_HANDLES_UNABLE_TO_UNMOUNT_IMAGE_PATH">
            <summary>
            A DismSession with open handles was attempted to be unmounted
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_OPEN_SESSION_HANDLES">
            <summary>
            A DismShutdown was called while there were open DismSession handles
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_PARENT_FEATURE_DISABLED">
            <summary>
            One or several parent features are disabled so current feature can not be enabled.
            Solutions:
            1 Call function DismGetFeatureParent to get all parent features and enable all of them. Or
            2 Set EnableAll to <see langword="true" /> when calling function DismEnableFeature.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_SHUTDOWN_IN_PROGRESS">
            <summary>
            A DismSession was being shutdown when another operation was called on it
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_UNABLE_TO_UNMOUNT_IMAGE_PATH">
            <summary>
            An image that is not a mounted WIM or mounted VHD was attempted to be unmounted
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_E_UNKNOWN_FEATURE">
            <summary>
            The feature is not present in the package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.ERROR_CANCELLED">
            <summary>
            The request was cancelled.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.ERROR_SUCCESS">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.ERROR_OUTOFMEMORY">
            <summary>
            Not enough storage is available to complete this operation.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.ERROR_REQUEST_ABORTED">
            <summary>
            The request was aborted.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.ERROR_SUCCESS_REBOOT_REQUIRED">
            <summary>
            The requested operation is successful. Changes will not be effective until the system is rebooted.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.ERROR_SUCCESS_RESTART_REQUIRED">
            <summary>
            The requested operation is successful. Changes will not be effective until the service is restarted.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.DISMAPI_S_RELOAD_IMAGE_SESSION_REQUIRED">
            <summary>
            The requested operation is successful. The DISM session needs to be reloaded.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.CBS_E_NOT_APPLICABLE">
            <summary>
            The specified package is not applicable.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismApi.GetLastErrorMessageTestHook">
            <summary>
            Allows tests to override the functionality of the <see cref="M:Microsoft.Dism.DismApi.GetLastErrorMessage" /> method.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismAppxPackage">
            <summary>
            Represents information about an Appx package.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismAppxPackage.#ctor(Microsoft.Dism.DismApi.DismAppxPackage_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismAppxPackage" /> class.
            </summary>
            <param name="appxPackage">A <see cref="T:Microsoft.Dism.DismApi.DismAppxPackage_" /> structure.</param>
        </member>
        <member name="P:Microsoft.Dism.DismAppxPackage.Architecture">
            <summary>
            Gets the architecture of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismAppxPackage.DisplayName">
            <summary>
            Gets the display name of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismAppxPackage.InstallLocation">
            <summary>
            Gets the installation path of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismAppxPackage.PackageName">
            <summary>
            Gets the name of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismAppxPackage.PublisherId">
            <summary>
            Gets the publisher identifier of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismAppxPackage.ResourceId">
            <summary>
            Gets the resource identifier of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismAppxPackage.Version">
            <summary>
            Gets the version of the package.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismAppxPackage.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismAppxPackage.Equals(Microsoft.Dism.DismAppxPackage)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismAppxPackage" /> is equal to the current <see cref="T:Microsoft.Dism.DismAppxPackage" />.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismAppxPackage" /> object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:Microsoft.Dism.DismAppxPackage" /> is equal to the current <see cref="T:Microsoft.Dism.DismAppxPackage" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismAppxPackage.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismAppxPackageCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Dism.DismAppxPackage" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismAppxPackageCollection.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismAppxPackageCollection" /> class.
            </summary>
            <param name="pointer">A pointer to the array of <see cref="T:Microsoft.Dism.DismApi.DismAppxPackage_" /> objects.</param>
            <param name="count">The number of objects in the array.</param>
        </member>
        <member name="T:Microsoft.Dism.DismCapability">
            <summary>
            Describes capability basic information.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismCapability.#ctor(Microsoft.Dism.DismApi.DismCapability_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismCapability" /> class.
            </summary>
            <param name="capability">A <see cref="T:Microsoft.Dism.DismApi.DismCapability_" /> structure.</param>
        </member>
        <member name="P:Microsoft.Dism.DismCapability.Name">
            <summary>
            Gets the name of the capability.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismCapability.State">
            <summary>
            Gets the state of the capability.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismCapability.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismCapability.Equals(Microsoft.Dism.DismCapability)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismCapability" /> object to compare with this object.</param>
            <returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismCapability.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismCapabilityCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Dism.DismCapability" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismCapabilityCollection.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismCapabilityCollection" /> class.
            </summary>
            <param name="pointer">A pointer to the array of <see cref="T:Microsoft.Dism.DismApi.DismCapability_" /> objects.</param>
            <param name="count">The number of objects in the array.</param>
        </member>
        <member name="T:Microsoft.Dism.DismCapabilityInfo">
            <summary>
            Describes information about a capability.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismCapabilityInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismCapabilityInfo" /> class.
            </summary>
            <param name="capabilityPtr">An <see cref="T:System.IntPtr" /> of a <see cref="T:Microsoft.Dism.DismApi.DismCapabilityInfo_" /> structure.</param>
        </member>
        <member name="M:Microsoft.Dism.DismCapabilityInfo.#ctor(Microsoft.Dism.DismApi.DismCapabilityInfo_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismCapabilityInfo" /> class.
            </summary>
            <param name="capabilityInfo">A <see cref="T:Microsoft.Dism.DismApi.DismCapabilityInfo_" /> structure containing the capability information.</param>
        </member>
        <member name="P:Microsoft.Dism.DismCapabilityInfo.Name">
            <summary>
            Gets the name of the capability.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismCapabilityInfo.State">
            <summary>
            Gets the state of the capability.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismCapabilityInfo.DisplayName">
            <summary>
            Gets the display name of the capability.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismCapabilityInfo.Description">
            <summary>
            Gets the description of the capability.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismCapabilityInfo.DownloadSize">
            <summary>
            Gets the download size of the capability in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismCapabilityInfo.InstallSize">
            <summary>
            Gets the install size of the capability in bytes.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismCapabilityInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismCapabilityInfo.Equals(Microsoft.Dism.DismCapabilityInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismCapabilityInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismCustomProperty">
            <summary>
            Represents the custom properties of a package. Custom properties are any properties that are not found in <see cref="T:Microsoft.Dism.DismPackage" /> or <see cref="T:Microsoft.Dism.DismFeature" />.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismCustomProperty.#ctor(Microsoft.Dism.DismApi.DismCustomProperty_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismCustomProperty" /> class.
            </summary>
            <param name="customProperty">A native <see cref="T:Microsoft.Dism.DismApi.DismCustomProperty_" /> struct that holds the data of the custom property</param>
        </member>
        <member name="P:Microsoft.Dism.DismCustomProperty.Name">
            <summary>
            Gets the name of the custom property.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismCustomProperty.Path">
            <summary>
            Gets the value of the custom property.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismCustomProperty.Value">
            <summary>
            Gets the value of the custom property.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismCustomProperty.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param><filterpriority>2</filterpriority>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismCustomProperty.Equals(Microsoft.Dism.DismCustomProperty)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismCustomProperty" /> is equal to the current <see cref="T:Microsoft.Dism.DismCustomProperty" />.
            </summary>
            <param name="other">A <see cref="T:Microsoft.Dism.DismCustomProperty" /> object to compare with the current object.</param>
            <returns><code>true</code> if the specified <see cref="T:Microsoft.Dism.DismCustomProperty" /> is equal to the current <see cref="T:Microsoft.Dism.DismCustomProperty" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismCustomProperty.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismCustomPropertyCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Dism.DismCustomProperty" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismCustomPropertyCollection.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismCustomPropertyCollection" /> class.
            </summary>
            <param name="pointer">A pointer to the array of <see cref="T:Microsoft.Dism.DismApi.DismCustomProperty_" /> objects.</param>
            <param name="count">The number of objects in the array.</param>
        </member>
        <member name="T:Microsoft.Dism.DismDriver">
            <summary>
            Describes the architecture and hardware that the driver supports.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismDriver.#ctor(Microsoft.Dism.DismApi.DismDriver_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismDriver" /> class.
            </summary>
            <param name="driver">A native DismDriver_ struct to copy data from.</param>
        </member>
        <member name="P:Microsoft.Dism.DismDriver.Architecture">
            <summary>
            Gets the architecture of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriver.CompatibleIds">
            <summary>
            Gets the service name of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriver.ExcludeIds">
            <summary>
            Gets the exclude IDs of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriver.HardwareDescription">
            <summary>
            Gets the hardware description of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriver.HardwareId">
            <summary>
            Gets the hardware ID of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriver.ManufacturerName">
            <summary>
            Gets the manufacturer name of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriver.ServerName">
            <summary>
            Gets the service name of the driver.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismDriver.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismDriver.Equals(Microsoft.Dism.DismDriver)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismDriver" /> is equal to the current <see cref="T:Microsoft.Dism.DismDriver" />.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismDriver" /> object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:Microsoft.Dism.DismDriver" /> is equal to the current <see cref="T:Microsoft.Dism.DismDriver" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismDriver.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismDriverCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Dism.DismDriver" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismDriverCollection.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismDriverCollection" /> class.
            </summary>
            <param name="pointer">A pointer to the array of <see cref="T:Microsoft.Dism.DismApi.DismDriver_" /> objects.</param>
            <param name="count">The number of objects in the array.</param>
        </member>
        <member name="T:Microsoft.Dism.DismDriverPackage">
            <summary>
            Represents basic information for the driver that is associated with the .inf file.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismDriverPackage.#ctor(Microsoft.Dism.DismApi.DismDriverPackage_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismDriverPackage" /> class.
            </summary>
            <param name="driverPackage">A native DismDriverPackage_ struct.</param>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.BootCritical">
            <summary>
            Gets a value indicating whether the driver is boot-critical.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.CatalogFile">
            <summary>
            Gets the catalog file for the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.ClassDescription">
            <summary>
            Gets the class description of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.ClassGuid">
            <summary>
            Gets the class GUID of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.ClassName">
            <summary>
            Gets the class name of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.Date">
            <summary>
            Gets the manufacturer's build date of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.DriverSignature">
            <summary>
            Gets the driver signature status.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.InBox">
            <summary>
            Gets a value indicating whether the driver is included on the Windows distribution media and automatically installed as part of Windows®.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.OriginalFileName">
            <summary>
            Gets the original file name of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.ProviderName">
            <summary>
            Gets the provider of the driver.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.PublishedName">
            <summary>
            Gets the published driver name.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismDriverPackage.Version">
            <summary>
            Gets the major version number of the driver.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismDriverPackage.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismDriverPackage.Equals(Microsoft.Dism.DismDriverPackage)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismDriverPackage" /> is equal to the current <see cref="T:Microsoft.Dism.DismDriverPackage" />.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismDriverPackage" /> object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:Microsoft.Dism.DismDriverPackage" /> is equal to the current <see cref="T:Microsoft.Dism.DismDriverPackage" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismDriverPackage.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismDriverPackageCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Dism.DismDriverPackage" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismDriverPackageCollection.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismDriverPackageCollection" /> class.
            </summary>
            <param name="pointer">A pointer to the array of <see cref="T:Microsoft.Dism.DismApi.DismAppxPackage_" /> objects.</param>
            <param name="count">The number of objects in the array.</param>
        </member>
        <member name="T:Microsoft.Dism.DismException">
            <summary>
            Represents an exception in the DismApi.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Dism.DismException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null" /> if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Dism.DismException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismException" /> class.
            </summary>
            <param name="error">The error code for the error.</param>
        </member>
        <member name="M:Microsoft.Dism.DismException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismException" /> class with a specified error that is the cause of this exception.
            </summary>
            <param name="errorCode">The HRESULT, a coded numerical value that is assigned to a specific exception.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.Dism.DismException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismException" /> class.
            </summary>
            <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
            <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" />.</param>
        </member>
        <member name="M:Microsoft.Dism.DismException.GetDismExceptionForHResult(System.Int32)">
            <summary>
            Gets a <see cref="T:Microsoft.Dism.DismException" /> or <see cref="T:System.Exception" /> for the specified error code.
            </summary>
            <param name="errorCode">The error code to get an exception for.</param>
            <returns>A <see cref="T:Microsoft.Dism.DismException" /> or <see cref="T:System.Exception" /> that represents the error code.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismNotInitializedException">
            <summary>
            The exception that is thrown when an attempt to use the DismApi occurs without first calling <see cref="M:Microsoft.Dism.DismApi.Initialize(Microsoft.Dism.DismLogLevel)" />.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismNotInitializedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismNotInitializedException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismNotInitializedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismNotInitializedException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Dism.DismNotInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismNotInitializedException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null" /> if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Dism.DismNotInitializedException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismNotInitializedException" /> class.
            </summary>
            <param name="errorCode">The error code to associate with the exception.</param>
        </member>
        <member name="T:Microsoft.Dism.DismOpenSessionsException">
            <summary>
            The exception that is thrown when an attempt to shutdown the Dism API occurs while there are open sessions.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismOpenSessionsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismOpenSessionsException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismOpenSessionsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismOpenSessionsException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Dism.DismOpenSessionsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismOpenSessionsException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null" /> if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Dism.DismOpenSessionsException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismOpenSessionsException" /> class.
            </summary>
            <param name="errorCode">The error code to associate with the exception.</param>
        </member>
        <member name="T:Microsoft.Dism.DismPackageNotApplicableException">
            <summary>
            The exception that is thrown when a package is not applicable to a particular session.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismPackageNotApplicableException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismPackageNotApplicableException" /> class.
            </summary>
            <param name="errorCode">The error code to associate with the exception.</param>
        </member>
        <member name="M:Microsoft.Dism.DismPackageNotApplicableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismPackageNotApplicableException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismPackageNotApplicableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismPackageNotApplicableException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Dism.DismPackageNotApplicableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismPackageNotApplicableException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null" /> if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Dism.DismRebootRequiredException">
            <summary>
            The exception that is thrown when the previous operations requires a reboot.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismRebootRequiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismRebootRequiredException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismRebootRequiredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismRebootRequiredException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Dism.DismRebootRequiredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismRebootRequiredException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null" /> if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Dism.DismRebootRequiredException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismRebootRequiredException" /> class.
            </summary>
            <param name="errorCode">The error code to associate with the exception.</param>
        </member>
        <member name="T:Microsoft.Dism.DismFeature">
            <summary>
            Describes basic information about a feature, such as the feature name and feature state.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismFeature.#ctor(Microsoft.Dism.DismApi.DismFeature_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismFeature" /> class.
            </summary>
            <param name="feature">A native DismFeature_ struct to copy data from.</param>
        </member>
        <member name="P:Microsoft.Dism.DismFeature.FeatureName">
            <summary>
            Gets the name of the feature.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismFeature.State">
            <summary>
            Gets the state of the feature.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismFeature.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismFeature.Equals(Microsoft.Dism.DismFeature)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismFeature" /> is equal to the current <see cref="T:Microsoft.Dism.DismFeature" />.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismFeature" /> object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:Microsoft.Dism.DismFeature" /> is equal to the current <see cref="T:Microsoft.Dism.DismFeature" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismFeature.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismFeatureCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Dism.DismFeature" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismFeatureCollection.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismFeatureCollection" /> class.
            </summary>
            <param name="pointer">A pointer to the array of <see cref="T:Microsoft.Dism.DismApi.DismFeature_" /> objects.</param>
            <param name="count">The number of objects in the array.</param>
        </member>
        <member name="T:Microsoft.Dism.DismFeatureInfo">
            <summary>
            Represents advanced feature information, such as installed state and whether a restart is required after installation.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismFeatureInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismFeatureInfo" /> class.
            </summary>
            <param name="featureInfoPtr">A pointer to a <see cref="T:Microsoft.Dism.DismApi.DismFeatureInfo_" /> struct.</param>
        </member>
        <member name="P:Microsoft.Dism.DismFeatureInfo.CustomProperties">
            <summary>
            Gets a list of custom properties associated with the feature.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismFeatureInfo.Description">
            <summary>
            Gets the description of the feature.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismFeatureInfo.DisplayName">
            <summary>
            Gets the display name of the feature. This is not always unique across all features.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismFeatureInfo.FeatureName">
            <summary>
            Gets the name of the feature.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismFeatureInfo.FeatureState">
            <summary>
            Gets the state of the feature.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismFeatureInfo.RestartRequired">
            <summary>
            Gets a value indicating whether a restart is required when installing or uninstalling the feature.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismFeatureInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismFeatureInfo.Equals(Microsoft.Dism.DismFeatureInfo)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismFeatureInfo" /> is equal to the current <see cref="T:Microsoft.Dism.DismFeatureInfo" />.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismFeatureInfo" /> object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:Microsoft.Dism.DismFeatureInfo" /> is equal to the current <see cref="T:Microsoft.Dism.DismFeatureInfo" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismFeatureInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismImageInfo">
            <summary>
            Represents the metadata of an image.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismImageInfo.#ctor(Microsoft.Dism.DismApi.DismImageInfo_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismImageInfo" /> class.
            Creates an instance of the DismImageInfo class.
            </summary>
            <param name="imageInfo">A instance of a DismImageInfo_ structure.</param>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.Architecture">
            <summary>
            Gets the architecture of the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.Bootable">
            <summary>
            Gets a value indicating whether an image is a bootable image type.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.CustomizedInfo">
            <summary>
            Gets the customized information for the image file. A <see cref="T:Microsoft.Dism.DismWimCustomizedInfo" /> for a WIM file. <see langword="null" /> for a VHD image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.DefaultLanguage">
            <summary>
            Gets the default language of the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.DefaultLanguageIndex">
            <summary>
            Gets the index number of the default language.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.EditionId">
            <summary>
            Gets the name of the edition.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.Hal">
            <summary>
            Gets the hardware abstraction layer (HAL) type of the operating system.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.ImageDescription">
            <summary>
            Gets the description of the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.ImageIndex">
            <summary>
            Gets the index number, starting at 1, of the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.ImageName">
            <summary>
            Gets the name of the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.ImageSize">
            <summary>
            Gets the size of the image in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.ImageType">
            <summary>
            Gets the type of the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.InstallationType">
            <summary>
            Gets the type of installation such as "Client" or "Server".
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.Languages">
            <summary>
            Gets the languages in the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.ProductName">
            <summary>
            Gets the name of the product.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.ProductSuite">
            <summary>
            Gets thee product suite, for example, "Terminal Server".
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.ProductType">
            <summary>
            Gets the product type, for example, "WinNT".
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.ProductVersion">
            <summary>
            Gets the version of the operating system contained in the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.SpLevel">
            <summary>
            Gets the service pack number.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismImageInfo.SystemRoot">
            <summary>
            Gets the path to the Windows directory.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismImageInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismImageInfo.Equals(Microsoft.Dism.DismImageInfo)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismImageInfo" /> is equal to the current <see cref="T:Microsoft.Dism.DismImageInfo" />.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismImageInfo" /> object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:Microsoft.Dism.DismImageInfo" /> is equal to the current <see cref="T:Microsoft.Dism.DismImageInfo" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismImageInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismImageInfoCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Dism.DismImageInfo" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismImageInfoCollection.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismImageInfoCollection" /> class.
            </summary>
            <param name="pointer">A pointer to the array of <see cref="T:Microsoft.Dism.DismApi.DismImageInfo_" /> objects.</param>
            <param name="count">The number of objects in the array.</param>
        </member>
        <member name="T:Microsoft.Dism.DismMountedImageInfo">
            <summary>
            Represents a mounted image.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismMountedImageInfo.#ctor(Microsoft.Dism.DismApi.DismMountedImageInfo_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismMountedImageInfo" /> class.
            </summary>
            <param name="mountedImageInfo">A <see cref="T:Microsoft.Dism.DismApi.DismMountedImageInfo_" /> structure.</param>
        </member>
        <member name="P:Microsoft.Dism.DismMountedImageInfo.ImageFilePath">
            <summary>
            Gets the relative or absolute path to the image file.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismMountedImageInfo.ImageIndex">
            <summary>
            Gets the index number of the image. Index numbering starts at 1.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismMountedImageInfo.MountMode">
            <summary>
            Gets the mount mode of the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismMountedImageInfo.MountPath">
            <summary>
            Gets the relative or absolute path to the mounted image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismMountedImageInfo.MountStatus">
            <summary>
            Gets the status of the mounted image.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismMountedImageInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismMountedImageInfo.Equals(Microsoft.Dism.DismMountedImageInfo)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismMountedImageInfo" /> is equal to the current <see cref="T:Microsoft.Dism.DismMountedImageInfo" />.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismMountedImageInfo" /> object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:Microsoft.Dism.DismMountedImageInfo" /> is equal to the current <see cref="T:Microsoft.Dism.DismMountedImageInfo" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismMountedImageInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismMountedImageInfoCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Dism.DismMountedImageInfo" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismMountedImageInfoCollection.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismMountedImageInfoCollection" /> class.
            </summary>
            <param name="pointer">A pointer to the array of <see cref="T:Microsoft.Dism.DismApi.DismMountedImageInfo_" /> objects.</param>
            <param name="count">The number of objects in the array.</param>
        </member>
        <member name="T:Microsoft.Dism.DismPackage">
            <summary>
            Represents basic information about a package, including the date and time that the package was installed.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismPackage.#ctor(Microsoft.Dism.DismApi.DismPackage_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismPackage" /> class.
            </summary>
            <param name="package">A <see cref="T:Microsoft.Dism.DismApi.DismPackage_" /> structure.</param>
        </member>
        <member name="P:Microsoft.Dism.DismPackage.InstallTime">
            <summary>
            Gets the date and time the package was installed.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackage.PackageName">
            <summary>
            Gets the package name.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackage.PackageState">
            <summary>
            Gets the state of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackage.ReleaseType">
            <summary>
            Gets the release type of the package.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismPackage.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismPackage.Equals(Microsoft.Dism.DismPackage)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismPackage" /> is equal to the current <see cref="T:Microsoft.Dism.DismPackage" />.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismPackage" /> object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:Microsoft.Dism.DismPackage" /> is equal to the current <see cref="T:Microsoft.Dism.DismPackage" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismPackage.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismPackageCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Dism.DismPackage" /> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismPackageCollection.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismPackageCollection" /> class.
            </summary>
            <param name="pointer">A pointer to the array of <see cref="T:Microsoft.Dism.DismApi.DismPackage_" /> objects.</param>
            <param name="count">The number of objects in the array.</param>
        </member>
        <member name="T:Microsoft.Dism.DismPackageInfo">
            <summary>
            Represents detailed package information such as the client used to install the package, the date and time that the package was installed, and support information.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismPackageInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismPackageInfo" /> class.
            </summary>
            <param name="packageInfoPtr">A pointer to a native <see cref="T:Microsoft.Dism.DismApi.DismPackageInfo_" /> struct.</param>
        </member>
        <member name="M:Microsoft.Dism.DismPackageInfo.#ctor(Microsoft.Dism.DismApi.DismPackageInfo_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismPackageInfo" /> class.
            </summary>
            <param name="packageInfo">A <see cref="T:Microsoft.Dism.DismApi.DismPackageInfo_" /> struct containing data for this object.</param>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.Applicable">
            <summary>
            Gets a value indicating whether the package is applicable to the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.Company">
            <summary>
            Gets the company that released the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.Copyright">
            <summary>
            Gets the copyright information of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.CreationTime">
            <summary>
            Gets the date and time that the package was created. This field is local time, based on the time zone of the computer that created the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.CustomProperties">
            <summary>
            Gets an array of DismCustomProperty Structure objects representing the custom properties of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.Description">
            <summary>
            Gets a description of the purpose of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.DisplayName">
            <summary>
            Gets the display name of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.Features">
            <summary>
            Gets an array of DismFeature Structure objects representing the features in the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.FullyOffline">
            <summary>
            Gets a DismFullyOfflineInstallableType Enumeration value describing whether a package can be installed offline without booting the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.InstallClient">
            <summary>
            Gets the client that installed this package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.InstallPackageName">
            <summary>
            Gets the original file name used for the package during installation.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.InstallTime">
            <summary>
            Gets the date and time that the package was installed.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.LastUpdateTime">
            <summary>
            Gets the date and time when this package was last updated. This field is local time, based on the servicing host computer.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.PackageName">
            <summary>
            Gets the name of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.PackageState">
            <summary>
            Gets the state of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.ProductName">
            <summary>
            Gets the product name for this package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.ProductVersion">
            <summary>
            Gets the product version for this package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.ReleaseType">
            <summary>
            Gets the release type of the package.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.RestartRequired">
            <summary>
            Gets a DismRestartType Enumeration value describing whether a restart is required after installing the package on an online image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfo.SupportInformation">
            <summary>
            Gets additional support information for this package.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismPackageInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismPackageInfo.Equals(Microsoft.Dism.DismPackageInfo)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismPackageInfo" /> is equal to the current <see cref="T:Microsoft.Dism.DismPackageInfo" />.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismPackageInfo" /> object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:Microsoft.Dism.DismPackageInfo" /> is equal to the current <see cref="T:Microsoft.Dism.DismPackageInfo" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismPackageInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismPackageInfoEx">
            <summary>
            Represents detailed package information such as the client used to install the package, the date and time that the package was installed, and support information.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismPackageInfoEx.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismPackageInfoEx" /> class.
            </summary>
            <param name="packageInfoPtr">A pointer to a native <see cref="T:Microsoft.Dism.DismApi.DismPackageInfoEx_" /> struct.</param>
        </member>
        <member name="P:Microsoft.Dism.DismPackageInfoEx.CapabilityId">
            <summary>
            Gets the capability of the package.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismPackageInfoEx.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismPackageInfoEx.Equals(Microsoft.Dism.DismPackageInfoEx)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismPackageInfoEx" /> is equal to the current <see cref="T:Microsoft.Dism.DismPackageInfoEx" />.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismPackageInfoEx" /> object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:Microsoft.Dism.DismPackageInfoEx" /> is equal to the current <see cref="T:Microsoft.Dism.DismPackageInfoEx" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismPackageInfoEx.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismProgress">
            <summary>
            Represents progress made during time-consuming operations.
            </summary>
            <remarks>This class also acts as a wrapper to the native callback method and stores the user data given back to the original caller.</remarks>
        </member>
        <member name="F:Microsoft.Dism.DismProgress._callback">
            <summary>
            The users callback method.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismProgress._eventHandle">
            <summary>
            An EventWaitHandle used to cancel the operation.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismProgress.#ctor(Microsoft.Dism.DismProgressCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismProgress" /> class.
            </summary>
            <param name="callback">A DismProgressCallback to call when progress is made.</param>
            <param name="userData">A custom object to pass to the callback.</param>
        </member>
        <member name="P:Microsoft.Dism.DismProgress.Cancel">
            <summary>
            Gets or sets a value indicating whether the operation should be canceled if possible.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismProgress.Current">
            <summary>
            Gets the current progress value.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismProgress.Total">
            <summary>
            Gets the total progress value.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismProgress.UserData">
            <summary>
            Gets the user defined object for the callback.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismProgress.EventHandle">
            <summary>
            Gets a SafeWaitHandle object used for canceling the operation.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismProgress.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismProgress.DismProgressCallbackNative(System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Called by the native DISM API during a time-consuming operation.
            </summary>
            <param name="current">The current progress value.</param>
            <param name="total">The total progress.</param>
            <param name="userData">Any user data associated with the callback.</param>
        </member>
        <member name="T:Microsoft.Dism.DismProgressCallback">
            <summary>
            Represents a callback method to be called to report progress during time-consuming operations.
            </summary>
            <param name="progress">A <see cref="T:Microsoft.Dism.DismProgress" /> object containing information about the current progress.</param>
        </member>
        <member name="T:Microsoft.Dism.DismSession">
            <summary>
            Represents a DismSession handle.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismSession.#ctor(System.String,System.String,System.String,Microsoft.Dism.DismSessionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismSession" /> class.
            </summary>
            <param name="imagePath">An absolute or relative path to the root directory of an offline Windows image, an absolute or relative path to the root directory of a mounted Windows image, or DISM_ONLINE_IMAGE to associate with the online Windows installation.</param>
            <param name="windowsDirectory">A relative or absolute path to the Windows directory. The path is relative to the mount point.</param>
            <param name="systemDrive">The letter of the system drive that contains the boot manager. If <paramref name="systemDrive" /> is <see langword="null" />, the default value of the drive containing the mount point is used.</param>
            <param name="options">A <see cref="T:Microsoft.Dism.DismSessionOptions" /> object that contains the options for the session.</param>
        </member>
        <member name="P:Microsoft.Dism.DismSession.RebootRequired">
            <summary>
            Gets a value indicating whether or not a reboot is required.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismSession.Options">
            <summary>
            Gets the options for the session.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismSession.Reload">
            <summary>
            Reloads the session by closing the current session and opening it again.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismSession.ReleaseHandle">
            <summary>
            Releases the DismSession handle.
            </summary>
            <returns><see langword="true" /> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismSessionOptions">
            <summary>
            Options that control session behavior
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismSessionOptions.ThrowExceptionOnRebootRequired">
            <summary>
            Gets or sets a value indicating whether or not an exception will be thrown if a reboot is required.
            If this value is set to false, the caller should check the <see cref="P:Microsoft.Dism.DismSession.RebootRequired" /> property to determine if reboot is required.
            <para>
            The default value is true.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismGeneration">
            <summary>
            Represents "generational" versions of Deployment Imaging and Servicing Management.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismGeneration.NotFound">
            <summary>
            DISM libraries associated with WAIK and/or WADK were not found.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismGeneration.Win7">
            <summary>
            DISM associated with the Windows 7 or Windows 7 Service Pack 1 version of the Windows Assessment and Installation Kit (WAIK).
            With respect to Windows PE, this would be 3.0 (Windows 7) or 3.1 (Windows 7 Service Pack 1).
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismGeneration.Win8">
            <summary>
            DISM associated with the Windows 8 version of the Windows Assessment and Deployment Kit (WADK).
            With respect to Windows PE, this would be 4.0 (Windows 8.0).
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismGeneration.Win8_1">
            <summary>
            DISM associated with the Windows 8.1 version of the Windows Assessment and Deployment Kit (WADK).
            With respect to Windows PE, this would be 5.0 (Windows 8.1).
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismGeneration.Win10">
            <summary>
            DISM associated with the Windows 10 version of the Windows Assessment and Deployment Kit (WADK).
            With respect to Windows PE, this would be 10.x (Windows 10.x).
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismUtilities">
            <summary>
            Provides utility functions related to DismApi.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismUtilities._hDismApi">
            <summary>
            The handle of the loaded DISM generational library.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismUtilities.WADK10DismApiPath">
            <summary>
            Gets the file path of "dismapi.dll", if installed, which is the entry point for the DISM API in the Windows 10.x generation of tools (WADK), otherwise <see langword="null" />.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismUtilities.WADK80DISMAPIPath">
            <summary>
            Gets file path of "dismapi.dll", if installed, which is the entry point for the DISM API in the Windows 8 generation of tools (WADK), otherwise <see langword="null" />.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismUtilities.WADK81DISMAPIPath">
            <summary>
            Gets the file path of "dismapi.dll", if installed, which is the entry point for the DISM API in the Windows 8.1 generation of tools (WADK), otherwise <see langword="null" />.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismUtilities.WAIKDISMAPIPath">
            <summary>
            Gets the file path of "dism.exe", if installed, which is the entry point for the DISM API in the Windows 7 generation of tools (WAIK), otherwise <see langword="null" />.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismUtilities.GetLatestDismGeneration">
            <summary>
            Returns a DismGeneration enumeration indicating the latest DISM generation installed and available on the local system.
            </summary>
            <returns>A <see cref="T:Microsoft.Dism.DismGeneration" /> indicating the lastest DISM generation installed if found, otherwise <see cref="F:Microsoft.Dism.DismGeneration.NotFound" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismUtilities.LoadDismGenerationLibrary(Microsoft.Dism.DismGeneration)">
            <summary>
            Loads the DISM API library associated with the provided DismGeneration.
            NOTE: This must be called before calling DismApi.Initialize(), as the initialization takes precedence based on Dynamic Link Library loading.
            If a DismGeneration library has already been loaded when initialize() is called, that version of the DISM generation library is utilized. If no DISM API library
            is loaded when initialization is called, it will attempt to load the DISM API installed on the local system (System32), if available.
            Only a single DISM generation library may be loaded at a given time. To switch versions, the caller can use LoadDismGenerationLibrary() and UnloadDismGenerationLibrary()
            to switch between DISM generations (WAIK and/or WADK) and/or what's natively available on the local system (System32).
            </summary>
            <param name="generation">The DismGeneration to be loaded.</param>
            <returns><see langword="true" /> if successful, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismUtilities.UnloadDismGenerationLibrary">
            <summary>
            Unloads a previously-loaded DISM generation library.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismUtilities.ThrowIfFail(System.Int32,Microsoft.Dism.DismSession,System.String)">
            <summary>
            Throws an exception if the specified function fails.
            </summary>
            <param name="hresult">An HRESULT value from a function return to check.</param>
            <param name="session">An optional <see cref="T:Microsoft.Dism.DismSession" /> to reload if necessary.</param>
            <param name="callerMemberName">The name of the calling member.</param>
        </member>
        <member name="T:Microsoft.Dism.DismUtilities.NativeMethods">
            <summary>
            Native methods necessary for manually loading and unloading Win32 libraries.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismUtilities.NativeMethods.FreeLibrary(System.IntPtr)">
             <summary>
             Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. When the reference count reaches zero, the module is unloaded from the address space of the calling process and the handle is no longer valid.
             </summary>
             <param name="hModule">A handle to the loaded library module.</param>
             <returns>If the function succeeds, the return value is a handle to the module.
            
             If the function fails, the return value is NULL.To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismUtilities.NativeMethods.LoadLibrary(System.String)">
             <summary>
             Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.
             </summary>
             <param name="lpFileName">The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file).</param>
             <returns>If the function succeeds, the return value is a handle to the module.
            
             If the function fails, the return value is NULL.To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.DismWimCustomizedInfo">
            <summary>
            Represents a Windows® Imaging Format (WIM) file.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismWimCustomizedInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismWimCustomizedInfo" /> class.
            </summary>
            <param name="wimCustomizedInfoPtr">A pointer to a native <see cref="T:Microsoft.Dism.DismApi.DismWimCustomizedInfo_" /> struct.</param>
        </member>
        <member name="M:Microsoft.Dism.DismWimCustomizedInfo.#ctor(Microsoft.Dism.DismApi.DismWimCustomizedInfo_)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Dism.DismWimCustomizedInfo" /> class.
            </summary>
            <param name="wimCustomizedInfo">A native <see cref="T:Microsoft.Dism.DismApi.DismWimCustomizedInfo_" /> struct to copy data from.</param>
        </member>
        <member name="P:Microsoft.Dism.DismWimCustomizedInfo.CreatedTime">
            <summary>
            Gets the time that the image file was created.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismWimCustomizedInfo.DirectoryCount">
            <summary>
            Gets the number of directories in the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismWimCustomizedInfo.FileCount">
            <summary>
            Gets the number of files in the image.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismWimCustomizedInfo.ModifiedTime">
            <summary>
            Gets the time that the image file was last modified.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.DismWimCustomizedInfo.Size">
            <summary>
            Gets the size of the customized info.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.DismWimCustomizedInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismWimCustomizedInfo.Equals(Microsoft.Dism.DismWimCustomizedInfo)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Dism.DismWimCustomizedInfo" /> is equal to the current <see cref="T:Microsoft.Dism.DismWimCustomizedInfo" />.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Dism.DismWimCustomizedInfo" /> object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified <see cref="T:Microsoft.Dism.DismWimCustomizedInfo" /> is equal to the current <see cref="T:Microsoft.Dism.DismWimCustomizedInfo" />, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Dism.DismWimCustomizedInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="T:Microsoft.Dism.ExtensionMethods">
            <summary>
            Provides extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.ExtensionMethods.ToList``2(System.IntPtr,System.UInt32,System.Func{``1,``0})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1" /> of objects at the specified pointer.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <typeparam name="TStruct">The type of the native structure for the item.</typeparam>
            <param name="ptr">The <see cref="T:System.IntPtr" /> pointing to the data.</param>
            <param name="count">The number of items that the pointer points to.</param>
            <param name="constructor">A <see cref="T:System.Func`2" /> that creates an instance of the item for the given native structure.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1" /> containing the items.</returns>
        </member>
        <member name="M:Microsoft.Dism.ExtensionMethods.ToStructure``1(System.IntPtr)">
            <summary>
            Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.
            </summary>
            <typeparam name="T">The System.Type of object to be created. This type object must represent a formatted class or a structure.</typeparam>
            <param name="ptr">A pointer to an unmanaged block of memory.</param>
            <returns>A managed object containing the data pointed to by the ptr parameter.</returns>
            <exception cref="T:System.ArgumentException">The T parameter layout is not sequential or explicit.
            -or-
            The T parameter is a generic type.</exception>
        </member>
        <member name="T:Microsoft.Dism.DismDriverSignature">
            <summary>
            Specifies the signature status of a driver.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824785.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismDriverSignature.Unknown">
            <summary>
            The signature status of the driver is unknown. DISM only checks for a valid signature for boot-critical drivers.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismDriverSignature.Unsigned">
            <summary>
            The driver is unsigned.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismDriverSignature.Signed">
            <summary>
            The driver is signed.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismFullyOfflineInstallableType">
            <summary>
            Specifies whether a package can be installed to an offline image without booting the image.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824791.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismFullyOfflineInstallableType.FullyOfflineInstallable">
            <summary>
            The package can be installed to an offline image without booting the image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismFullyOfflineInstallableType.FullyOfflineNotInstallable">
            <summary>
            You must boot into the image in order to complete installation of this package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismFullyOfflineInstallableType.FullyOfflineInstallableUndetermined">
            <summary>
            You may have to boot the image in order to complete the installation of this package.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismImageBootable">
            <summary>
            Indicates whether an image is a bootable image type.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824736.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismImageBootable.ImageBootableYes">
            <summary>
            The image is bootable.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismImageBootable.ImageBootableNo">
            <summary>
            The image is not bootable.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismImageBootable.ImageBootableUnknown">
            <summary>
            The image type is unknown.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismImageHealthState">
            <summary>
            Specifies whether an image is corrupted.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824761.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismImageHealthState.Healthy">
            <summary>
            The image is not corrupted.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismImageHealthState.Repairable">
            <summary>
            The image is corrupted but can be repaired.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismImageHealthState.NonRepairable">
            <summary>
            The image is corrupted and cannot be repaired. Discard the image and start again.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismImageType">
            <summary>
            Specifies the file type of the Windows® image container.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824762.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismImageType.Unsupported">
            <summary>
            The file type is unsupported. The image must be in a .wim, .vhd, or .vhdx file.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismImageType.Wim">
            <summary>
            The image is in a .wim file.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismImageType.Vhd">
            <summary>
            The image is in a .vhd or .vhdx file.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismLogLevel">
            <summary>
            Specifies the kind of information that is reported in the log file.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824757.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismLogLevel.LogErrors">
            <summary>
            Log file only contains errors.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismLogLevel.LogErrorsWarnings">
            <summary>
            Log file contains errors and warnings.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismLogLevel.LogErrorsWarningsInfo">
            <summary>
            Log file contains errors, warnings, and additional information.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismMountImageOptions">
            <summary>
            Specifies options when mounting an image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismMountImageOptions.None">
            <summary>
            Indicates to use no options.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismMountImageOptions.Optimize">
            <summary>
            Indicates that the image should be mounted with optimization. When the optimize option is used, only the top level of the file directory in the image will be mapped to the mount location. The first time that you access a file path that is not initially mapped, that branch of the directory will be mounted. As a result, there may be an increase in the time that is required to access a directory for the first time after mounting an image using the optimize option.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismMountImageOptions.CheckIntegrity">
            <summary>
            Indicates to set a flag on the image specifying whether the image is corrupted.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismMountMode">
            <summary>
            Specifies whether an image is mounted as read-only or as read-write.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824752.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismMountMode.ReadWrite">
            <summary>
            Mounts an image in read-write mode.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismMountMode.ReadOnly">
            <summary>
            Mounts an image in read-only mode.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismMountStatus">
            <summary>
            Indicates whether a mounted image needs to be remounted.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824794.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismMountStatus.Ok">
            <summary>
            Indicates that the mounted image is mounted and ready for servicing.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismMountStatus.NeedsRemount">
            <summary>
            Indicates that the mounted image needs to be remounted before being serviced.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismMountStatus.Invalid">
            <summary>
            Indicates that the mounted image is corrupt and is in an invalid state.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismPackageFeatureState">
            <summary>
            Specifies the state of a package or a feature.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824765.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismPackageFeatureState.NotPresent">
            <summary>
            The package or feature is not present.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismPackageFeatureState.UninstallPending">
            <summary>
            An uninstall process for the package or feature is pending. Additional processes are pending and must be completed before the package or feature is successfully uninstalled.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismPackageFeatureState.Staged">
            <summary>
            The package or feature is staged.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismPackageFeatureState.Resolved">
            <summary>
            Metadata about the package or feature has been added to the system, but the package or feature is not present.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismPackageFeatureState.Removed">
            <summary>
            Metadata about the package or feature has been added to the system, but the package or feature is not present.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismPackageFeatureState.Installed">
            <summary>
            The package or feature is installed.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismPackageFeatureState.InstallPending">
            <summary>
            The install process for the package or feature is pending. Additional processes are pending and must be completed before the package or feature is successfully installed.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismPackageFeatureState.Superseded">
            <summary>
            The package or feature has been superseded by a more recent package or feature.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismPackageFeatureState.PartiallyInstalled">
            <summary>
            The package or feature is partially installed. Some parts of the package or feature have not been installed.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismProcessorArchitecture">
            <summary>
            Specifies the processor architecture of the image.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismProcessorArchitecture.None">
            <summary>
            The processor architecture is unknown.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismProcessorArchitecture.Intel">
            <summary>
            The image contains the Intel architecture.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismProcessorArchitecture.IA64">
            <summary>
            The image contains the IA64 architecture.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismProcessorArchitecture.AMD64">
            <summary>
            The image contains the AMD64 architecture.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismProcessorArchitecture.ARM">
            <summary>
            The image contains the ARM architecture.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismProcessorArchitecture.ARM64">
            <summary>
            The image contains the ARM64 architecture.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismProcessorArchitecture.Neutral">
            <summary>
            A neutral processor architecture.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismReleaseType">
            <summary>
            Specifies the release type of a package.
            </summary>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824783.aspx" />
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.CriticalUpdate">
            <summary>
            The package is a critical update.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.Driver">
            <summary>
            The package is a driver.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.FeaturePack">
            <summary>
            The package is a feature pack.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.Hotfix">
            <summary>
            The package is a hotfix.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.SecurityUpdate">
            <summary>
            The package is a security update.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.SoftwareUpdate">
            <summary>
            The package is a software update.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.Update">
            <summary>
            The package is a general update.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.UpdateRollup">
            <summary>
            The package is an update rollup.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.LanguagePack">
            <summary>
            The package is a language pack.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.Foundation">
            <summary>
            The package is a foundation package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.ServicePack">
            <summary>
            The package is a service pack.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.Product">
            <summary>
            The package is a product release.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.LocalPack">
            <summary>
            The package is a local pack.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.Other">
            <summary>
            The package is another type of release.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismReleaseType.OnDemandPack">
            <summary>
            This package is a feature on demand.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismRestartType">
            <summary>
            Specifies whether a restart is required after enabling a feature or installing a package.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824749.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismRestartType.No">
            <summary>
            No restart is required.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismRestartType.Possible">
            <summary>
            This package or feature might require a .
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismRestartType.Required">
            <summary>
            This package or feature always requires a .
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismStubPackageOption">
            <summary>
            Specifies the stub package option when adding an app package (.appx).
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismStubPackageOption.None">
            <summary>
            No option is specified.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismStubPackageOption.InstallFull">
            <summary>
            Use full package.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismStubPackageOption.InstallStub">
            <summary>
            Install stub package.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismImageIdentifier">
            <summary>
            Specifies whether an image is identified by name or by index number.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824748.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismImageIdentifier.ImageIndex">
            <summary>
            Identify the image by index number.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismImageIdentifier.ImageName">
            <summary>
            Identify the image by name.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.DismPackageIdentifier">
            <summary>
            Specifies whether a package is identified by name or by file path.
            </summary>
            <remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh824781.aspx" />
            </remarks>
        </member>
        <member name="F:Microsoft.Dism.DismPackageIdentifier.None">
            <summary>
            No package is specified.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismPackageIdentifier.Name">
            <summary>
            The package is identified by its name.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.DismPackageIdentifier.Path">
            <summary>
            The package is specified by its path.
            </summary>
        </member>
        <member name="T:Microsoft.Dism.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Dism.Properties.Resources.DismExceptionMessageNotInitialized">
            <summary>
              Looks up a localized string similar to The DismApi has not been initialized..
            </summary>
        </member>
        <member name="P:Microsoft.Dism.Properties.Resources.DismExceptionMessageOpenSessions">
            <summary>
              Looks up a localized string similar to There are one or more open sessions..
            </summary>
        </member>
        <member name="P:Microsoft.Dism.Properties.Resources.DismExceptionMessagePackageNotApplicable">
            <summary>
              Looks up a localized string similar to The specified package is not applicable..
            </summary>
        </member>
        <member name="P:Microsoft.Dism.Properties.Resources.DismExceptionMessageRebootRequired">
            <summary>
              Looks up a localized string similar to A restart is required to complete the operation..
            </summary>
        </member>
        <member name="P:Microsoft.Dism.Properties.Resources.DismExceptionMessageReloadImageSessionRequired">
            <summary>
              Looks up a localized string similar to A reload of image session is required..
            </summary>
        </member>
        <member name="T:Microsoft.Dism.SystemTime">
            <summary>
            Specifies a date and time, using individual members for the month, day, year, weekday, hour, minute, second, and millisecond. The time is either in coordinated universal time (UTC) or local time, depending on the function that is being called.
            </summary>
            <remarks>It is not recommended that you add and subtract values from the SYSTEMTIME structure to obtain relative times. Instead, you should
            <list type="bullet">
                <item><description>Convert the SYSTEMTIME structure to a FILETIME structure.</description></item>
                <item><description>Copy the resulting FILETIME structure to a ULARGE_INTEGER structure.</description></item>
                <item><description>Use normal 64-bit arithmetic on the ULARGE_INTEGER value.</description></item>
            </list>
            The system can periodically refresh the time by synchronizing with a time source. Because the system time can be adjusted either forward or backward, do not compare system time readings to determine elapsed time. Instead, use one of the methods described in Windows Time.</remarks>
            <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724950(v=vs.85).aspx" />
            <![CDATA[typedef struct _SYSTEMTIME {
            WORD wYear;
            WORD wMonth;
            WORD wDayOfWeek;
            WORD wDay;
            WORD wHour;
            WORD wMinute;
            WORD wSecond;
            WORD wMilliseconds;
            } SYSTEMTIME, *PSYSTEMTIME;]]>
        </member>
        <member name="F:Microsoft.Dism.SystemTime.Year">
            <summary>
            The year. The valid values for this member are 1601 through 30827.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.SystemTime.Month">
            <summary>
            The month. January = 1 and December = 12
            </summary>
        </member>
        <member name="F:Microsoft.Dism.SystemTime.DayOfWeek">
            <summary>
            The day of the week. Sunday = 0 and Saturday = 6
            </summary>
        </member>
        <member name="F:Microsoft.Dism.SystemTime.Day">
            <summary>
            The day of the month. The valid values for this member are 1 through 31.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.SystemTime.Hour">
            <summary>
            The hour. The valid values for this member are 0 through 23.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.SystemTime.Minute">
            <summary>
            The minute. The valid values for this member are 0 through 59.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.SystemTime.Second">
            <summary>
            The second. The valid values for this member are 0 through 59.
            </summary>
        </member>
        <member name="F:Microsoft.Dism.SystemTime.Milliseconds">
            <summary>
            The millisecond. The valid values for this member are 0 through 999.
            </summary>
        </member>
        <member name="M:Microsoft.Dism.SystemTime.op_Implicit(System.DateTime)~Microsoft.Dism.SystemTime">
            <summary>
            Converts a <see cref="T:System.DateTime" /> to a <see cref="T:Microsoft.Dism.SystemTime" />.
            </summary>
            <param name="dateTime">The time to convert.</param>
        </member>
        <member name="M:Microsoft.Dism.SystemTime.op_Implicit(Microsoft.Dism.SystemTime)~System.DateTime">
            <summary>
            Converts a <see cref="T:Microsoft.Dism.SystemTime" /> to a <see cref="T:System.DateTime" />
            </summary>
            <param name="systemTime">The time to convert.</param>
        </member>
    </members>
</doc>
